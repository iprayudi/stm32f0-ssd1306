
stm32f0-ssd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ef8  08003764  08003764  00013764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800665c  0800665c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800665c  0800665c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800665c  0800665c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800665c  0800665c  0001665c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006660  08006660  00016660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000090  080066f4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000204  20000524  080066f4  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f3c  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a06  00000000  00000000  00028ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000788  00000000  00000000  0002aa00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000688  00000000  00000000  0002b188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014d00  00000000  00000000  0002b810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000806f  00000000  00000000  00040510  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e1fc  00000000  00000000  0004857f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b677b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c84  00000000  00000000  000b67f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800374c 	.word	0x0800374c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	0800374c 	.word	0x0800374c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_i2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2800      	cmp	r0, #0
 8000224:	d03d      	beq.n	80002a2 <__aeabi_i2f+0x82>
 8000226:	17c3      	asrs	r3, r0, #31
 8000228:	18c5      	adds	r5, r0, r3
 800022a:	405d      	eors	r5, r3
 800022c:	0fc4      	lsrs	r4, r0, #31
 800022e:	0028      	movs	r0, r5
 8000230:	f000 fbfc 	bl	8000a2c <__clzsi2>
 8000234:	229e      	movs	r2, #158	; 0x9e
 8000236:	1a12      	subs	r2, r2, r0
 8000238:	2a96      	cmp	r2, #150	; 0x96
 800023a:	dc07      	bgt.n	800024c <__aeabi_i2f+0x2c>
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	2808      	cmp	r0, #8
 8000240:	dd33      	ble.n	80002aa <__aeabi_i2f+0x8a>
 8000242:	3808      	subs	r0, #8
 8000244:	4085      	lsls	r5, r0
 8000246:	0268      	lsls	r0, r5, #9
 8000248:	0a40      	lsrs	r0, r0, #9
 800024a:	e023      	b.n	8000294 <__aeabi_i2f+0x74>
 800024c:	2a99      	cmp	r2, #153	; 0x99
 800024e:	dd0b      	ble.n	8000268 <__aeabi_i2f+0x48>
 8000250:	2305      	movs	r3, #5
 8000252:	0029      	movs	r1, r5
 8000254:	1a1b      	subs	r3, r3, r0
 8000256:	40d9      	lsrs	r1, r3
 8000258:	0003      	movs	r3, r0
 800025a:	331b      	adds	r3, #27
 800025c:	409d      	lsls	r5, r3
 800025e:	002b      	movs	r3, r5
 8000260:	1e5d      	subs	r5, r3, #1
 8000262:	41ab      	sbcs	r3, r5
 8000264:	4319      	orrs	r1, r3
 8000266:	000d      	movs	r5, r1
 8000268:	2805      	cmp	r0, #5
 800026a:	dd01      	ble.n	8000270 <__aeabi_i2f+0x50>
 800026c:	1f43      	subs	r3, r0, #5
 800026e:	409d      	lsls	r5, r3
 8000270:	002b      	movs	r3, r5
 8000272:	490f      	ldr	r1, [pc, #60]	; (80002b0 <__aeabi_i2f+0x90>)
 8000274:	400b      	ands	r3, r1
 8000276:	076e      	lsls	r6, r5, #29
 8000278:	d009      	beq.n	800028e <__aeabi_i2f+0x6e>
 800027a:	260f      	movs	r6, #15
 800027c:	4035      	ands	r5, r6
 800027e:	2d04      	cmp	r5, #4
 8000280:	d005      	beq.n	800028e <__aeabi_i2f+0x6e>
 8000282:	3304      	adds	r3, #4
 8000284:	015d      	lsls	r5, r3, #5
 8000286:	d502      	bpl.n	800028e <__aeabi_i2f+0x6e>
 8000288:	229f      	movs	r2, #159	; 0x9f
 800028a:	400b      	ands	r3, r1
 800028c:	1a12      	subs	r2, r2, r0
 800028e:	019b      	lsls	r3, r3, #6
 8000290:	0a58      	lsrs	r0, r3, #9
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	0240      	lsls	r0, r0, #9
 8000296:	05d2      	lsls	r2, r2, #23
 8000298:	0a40      	lsrs	r0, r0, #9
 800029a:	07e4      	lsls	r4, r4, #31
 800029c:	4310      	orrs	r0, r2
 800029e:	4320      	orrs	r0, r4
 80002a0:	bd70      	pop	{r4, r5, r6, pc}
 80002a2:	2400      	movs	r4, #0
 80002a4:	2200      	movs	r2, #0
 80002a6:	2000      	movs	r0, #0
 80002a8:	e7f4      	b.n	8000294 <__aeabi_i2f+0x74>
 80002aa:	0268      	lsls	r0, r5, #9
 80002ac:	0a40      	lsrs	r0, r0, #9
 80002ae:	e7f1      	b.n	8000294 <__aeabi_i2f+0x74>
 80002b0:	fbffffff 	.word	0xfbffffff

080002b4 <__aeabi_ddiv>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	4657      	mov	r7, sl
 80002b8:	46de      	mov	lr, fp
 80002ba:	464e      	mov	r6, r9
 80002bc:	4645      	mov	r5, r8
 80002be:	b5e0      	push	{r5, r6, r7, lr}
 80002c0:	4683      	mov	fp, r0
 80002c2:	0007      	movs	r7, r0
 80002c4:	030e      	lsls	r6, r1, #12
 80002c6:	0048      	lsls	r0, r1, #1
 80002c8:	b085      	sub	sp, #20
 80002ca:	4692      	mov	sl, r2
 80002cc:	001c      	movs	r4, r3
 80002ce:	0b36      	lsrs	r6, r6, #12
 80002d0:	0d40      	lsrs	r0, r0, #21
 80002d2:	0fcd      	lsrs	r5, r1, #31
 80002d4:	2800      	cmp	r0, #0
 80002d6:	d100      	bne.n	80002da <__aeabi_ddiv+0x26>
 80002d8:	e09d      	b.n	8000416 <__aeabi_ddiv+0x162>
 80002da:	4b95      	ldr	r3, [pc, #596]	; (8000530 <__aeabi_ddiv+0x27c>)
 80002dc:	4298      	cmp	r0, r3
 80002de:	d039      	beq.n	8000354 <__aeabi_ddiv+0xa0>
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	00f6      	lsls	r6, r6, #3
 80002e4:	041b      	lsls	r3, r3, #16
 80002e6:	431e      	orrs	r6, r3
 80002e8:	4a92      	ldr	r2, [pc, #584]	; (8000534 <__aeabi_ddiv+0x280>)
 80002ea:	0f7b      	lsrs	r3, r7, #29
 80002ec:	4333      	orrs	r3, r6
 80002ee:	4699      	mov	r9, r3
 80002f0:	4694      	mov	ip, r2
 80002f2:	0003      	movs	r3, r0
 80002f4:	4463      	add	r3, ip
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2300      	movs	r3, #0
 80002fa:	2600      	movs	r6, #0
 80002fc:	00ff      	lsls	r7, r7, #3
 80002fe:	9302      	str	r3, [sp, #8]
 8000300:	0323      	lsls	r3, r4, #12
 8000302:	0b1b      	lsrs	r3, r3, #12
 8000304:	4698      	mov	r8, r3
 8000306:	0063      	lsls	r3, r4, #1
 8000308:	0fe4      	lsrs	r4, r4, #31
 800030a:	4652      	mov	r2, sl
 800030c:	0d5b      	lsrs	r3, r3, #21
 800030e:	9401      	str	r4, [sp, #4]
 8000310:	d100      	bne.n	8000314 <__aeabi_ddiv+0x60>
 8000312:	e0b3      	b.n	800047c <__aeabi_ddiv+0x1c8>
 8000314:	4986      	ldr	r1, [pc, #536]	; (8000530 <__aeabi_ddiv+0x27c>)
 8000316:	428b      	cmp	r3, r1
 8000318:	d100      	bne.n	800031c <__aeabi_ddiv+0x68>
 800031a:	e09e      	b.n	800045a <__aeabi_ddiv+0x1a6>
 800031c:	4642      	mov	r2, r8
 800031e:	00d1      	lsls	r1, r2, #3
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	0412      	lsls	r2, r2, #16
 8000324:	430a      	orrs	r2, r1
 8000326:	4651      	mov	r1, sl
 8000328:	0f49      	lsrs	r1, r1, #29
 800032a:	4311      	orrs	r1, r2
 800032c:	468b      	mov	fp, r1
 800032e:	4981      	ldr	r1, [pc, #516]	; (8000534 <__aeabi_ddiv+0x280>)
 8000330:	4652      	mov	r2, sl
 8000332:	468c      	mov	ip, r1
 8000334:	9900      	ldr	r1, [sp, #0]
 8000336:	4463      	add	r3, ip
 8000338:	1acb      	subs	r3, r1, r3
 800033a:	2100      	movs	r1, #0
 800033c:	00d2      	lsls	r2, r2, #3
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	002b      	movs	r3, r5
 8000342:	4063      	eors	r3, r4
 8000344:	469a      	mov	sl, r3
 8000346:	2e0f      	cmp	r6, #15
 8000348:	d900      	bls.n	800034c <__aeabi_ddiv+0x98>
 800034a:	e105      	b.n	8000558 <__aeabi_ddiv+0x2a4>
 800034c:	4b7a      	ldr	r3, [pc, #488]	; (8000538 <__aeabi_ddiv+0x284>)
 800034e:	00b6      	lsls	r6, r6, #2
 8000350:	599b      	ldr	r3, [r3, r6]
 8000352:	469f      	mov	pc, r3
 8000354:	465b      	mov	r3, fp
 8000356:	4333      	orrs	r3, r6
 8000358:	4699      	mov	r9, r3
 800035a:	d000      	beq.n	800035e <__aeabi_ddiv+0xaa>
 800035c:	e0b8      	b.n	80004d0 <__aeabi_ddiv+0x21c>
 800035e:	2302      	movs	r3, #2
 8000360:	2608      	movs	r6, #8
 8000362:	2700      	movs	r7, #0
 8000364:	9000      	str	r0, [sp, #0]
 8000366:	9302      	str	r3, [sp, #8]
 8000368:	e7ca      	b.n	8000300 <__aeabi_ddiv+0x4c>
 800036a:	46cb      	mov	fp, r9
 800036c:	003a      	movs	r2, r7
 800036e:	9902      	ldr	r1, [sp, #8]
 8000370:	9501      	str	r5, [sp, #4]
 8000372:	9b01      	ldr	r3, [sp, #4]
 8000374:	469a      	mov	sl, r3
 8000376:	2902      	cmp	r1, #2
 8000378:	d027      	beq.n	80003ca <__aeabi_ddiv+0x116>
 800037a:	2903      	cmp	r1, #3
 800037c:	d100      	bne.n	8000380 <__aeabi_ddiv+0xcc>
 800037e:	e280      	b.n	8000882 <__aeabi_ddiv+0x5ce>
 8000380:	2901      	cmp	r1, #1
 8000382:	d044      	beq.n	800040e <__aeabi_ddiv+0x15a>
 8000384:	496d      	ldr	r1, [pc, #436]	; (800053c <__aeabi_ddiv+0x288>)
 8000386:	9b00      	ldr	r3, [sp, #0]
 8000388:	468c      	mov	ip, r1
 800038a:	4463      	add	r3, ip
 800038c:	001c      	movs	r4, r3
 800038e:	2c00      	cmp	r4, #0
 8000390:	dd38      	ble.n	8000404 <__aeabi_ddiv+0x150>
 8000392:	0753      	lsls	r3, r2, #29
 8000394:	d000      	beq.n	8000398 <__aeabi_ddiv+0xe4>
 8000396:	e213      	b.n	80007c0 <__aeabi_ddiv+0x50c>
 8000398:	08d2      	lsrs	r2, r2, #3
 800039a:	465b      	mov	r3, fp
 800039c:	01db      	lsls	r3, r3, #7
 800039e:	d509      	bpl.n	80003b4 <__aeabi_ddiv+0x100>
 80003a0:	4659      	mov	r1, fp
 80003a2:	4b67      	ldr	r3, [pc, #412]	; (8000540 <__aeabi_ddiv+0x28c>)
 80003a4:	4019      	ands	r1, r3
 80003a6:	468b      	mov	fp, r1
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	00c9      	lsls	r1, r1, #3
 80003ac:	468c      	mov	ip, r1
 80003ae:	9b00      	ldr	r3, [sp, #0]
 80003b0:	4463      	add	r3, ip
 80003b2:	001c      	movs	r4, r3
 80003b4:	4b63      	ldr	r3, [pc, #396]	; (8000544 <__aeabi_ddiv+0x290>)
 80003b6:	429c      	cmp	r4, r3
 80003b8:	dc07      	bgt.n	80003ca <__aeabi_ddiv+0x116>
 80003ba:	465b      	mov	r3, fp
 80003bc:	0564      	lsls	r4, r4, #21
 80003be:	075f      	lsls	r7, r3, #29
 80003c0:	025b      	lsls	r3, r3, #9
 80003c2:	4317      	orrs	r7, r2
 80003c4:	0b1b      	lsrs	r3, r3, #12
 80003c6:	0d62      	lsrs	r2, r4, #21
 80003c8:	e002      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 80003ca:	2300      	movs	r3, #0
 80003cc:	2700      	movs	r7, #0
 80003ce:	4a58      	ldr	r2, [pc, #352]	; (8000530 <__aeabi_ddiv+0x27c>)
 80003d0:	2100      	movs	r1, #0
 80003d2:	031b      	lsls	r3, r3, #12
 80003d4:	0b1c      	lsrs	r4, r3, #12
 80003d6:	0d0b      	lsrs	r3, r1, #20
 80003d8:	051b      	lsls	r3, r3, #20
 80003da:	4323      	orrs	r3, r4
 80003dc:	0514      	lsls	r4, r2, #20
 80003de:	4a5a      	ldr	r2, [pc, #360]	; (8000548 <__aeabi_ddiv+0x294>)
 80003e0:	0038      	movs	r0, r7
 80003e2:	4013      	ands	r3, r2
 80003e4:	431c      	orrs	r4, r3
 80003e6:	4653      	mov	r3, sl
 80003e8:	0064      	lsls	r4, r4, #1
 80003ea:	07db      	lsls	r3, r3, #31
 80003ec:	0864      	lsrs	r4, r4, #1
 80003ee:	431c      	orrs	r4, r3
 80003f0:	0021      	movs	r1, r4
 80003f2:	b005      	add	sp, #20
 80003f4:	bc3c      	pop	{r2, r3, r4, r5}
 80003f6:	4690      	mov	r8, r2
 80003f8:	4699      	mov	r9, r3
 80003fa:	46a2      	mov	sl, r4
 80003fc:	46ab      	mov	fp, r5
 80003fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000400:	2201      	movs	r2, #1
 8000402:	4252      	negs	r2, r2
 8000404:	2301      	movs	r3, #1
 8000406:	1b1b      	subs	r3, r3, r4
 8000408:	2b38      	cmp	r3, #56	; 0x38
 800040a:	dc00      	bgt.n	800040e <__aeabi_ddiv+0x15a>
 800040c:	e1ad      	b.n	800076a <__aeabi_ddiv+0x4b6>
 800040e:	2200      	movs	r2, #0
 8000410:	2300      	movs	r3, #0
 8000412:	2700      	movs	r7, #0
 8000414:	e7dc      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 8000416:	465b      	mov	r3, fp
 8000418:	4333      	orrs	r3, r6
 800041a:	4699      	mov	r9, r3
 800041c:	d05e      	beq.n	80004dc <__aeabi_ddiv+0x228>
 800041e:	2e00      	cmp	r6, #0
 8000420:	d100      	bne.n	8000424 <__aeabi_ddiv+0x170>
 8000422:	e18a      	b.n	800073a <__aeabi_ddiv+0x486>
 8000424:	0030      	movs	r0, r6
 8000426:	f000 fb01 	bl	8000a2c <__clzsi2>
 800042a:	0003      	movs	r3, r0
 800042c:	3b0b      	subs	r3, #11
 800042e:	2b1c      	cmp	r3, #28
 8000430:	dd00      	ble.n	8000434 <__aeabi_ddiv+0x180>
 8000432:	e17b      	b.n	800072c <__aeabi_ddiv+0x478>
 8000434:	221d      	movs	r2, #29
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	465a      	mov	r2, fp
 800043a:	0001      	movs	r1, r0
 800043c:	40da      	lsrs	r2, r3
 800043e:	3908      	subs	r1, #8
 8000440:	408e      	lsls	r6, r1
 8000442:	0013      	movs	r3, r2
 8000444:	465f      	mov	r7, fp
 8000446:	4333      	orrs	r3, r6
 8000448:	4699      	mov	r9, r3
 800044a:	408f      	lsls	r7, r1
 800044c:	4b3f      	ldr	r3, [pc, #252]	; (800054c <__aeabi_ddiv+0x298>)
 800044e:	2600      	movs	r6, #0
 8000450:	1a1b      	subs	r3, r3, r0
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2300      	movs	r3, #0
 8000456:	9302      	str	r3, [sp, #8]
 8000458:	e752      	b.n	8000300 <__aeabi_ddiv+0x4c>
 800045a:	4641      	mov	r1, r8
 800045c:	4653      	mov	r3, sl
 800045e:	430b      	orrs	r3, r1
 8000460:	493b      	ldr	r1, [pc, #236]	; (8000550 <__aeabi_ddiv+0x29c>)
 8000462:	469b      	mov	fp, r3
 8000464:	468c      	mov	ip, r1
 8000466:	9b00      	ldr	r3, [sp, #0]
 8000468:	4463      	add	r3, ip
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	465b      	mov	r3, fp
 800046e:	2b00      	cmp	r3, #0
 8000470:	d13b      	bne.n	80004ea <__aeabi_ddiv+0x236>
 8000472:	2302      	movs	r3, #2
 8000474:	2200      	movs	r2, #0
 8000476:	431e      	orrs	r6, r3
 8000478:	2102      	movs	r1, #2
 800047a:	e761      	b.n	8000340 <__aeabi_ddiv+0x8c>
 800047c:	4643      	mov	r3, r8
 800047e:	4313      	orrs	r3, r2
 8000480:	469b      	mov	fp, r3
 8000482:	d037      	beq.n	80004f4 <__aeabi_ddiv+0x240>
 8000484:	4643      	mov	r3, r8
 8000486:	2b00      	cmp	r3, #0
 8000488:	d100      	bne.n	800048c <__aeabi_ddiv+0x1d8>
 800048a:	e162      	b.n	8000752 <__aeabi_ddiv+0x49e>
 800048c:	4640      	mov	r0, r8
 800048e:	f000 facd 	bl	8000a2c <__clzsi2>
 8000492:	0003      	movs	r3, r0
 8000494:	3b0b      	subs	r3, #11
 8000496:	2b1c      	cmp	r3, #28
 8000498:	dd00      	ble.n	800049c <__aeabi_ddiv+0x1e8>
 800049a:	e153      	b.n	8000744 <__aeabi_ddiv+0x490>
 800049c:	0002      	movs	r2, r0
 800049e:	4641      	mov	r1, r8
 80004a0:	3a08      	subs	r2, #8
 80004a2:	4091      	lsls	r1, r2
 80004a4:	4688      	mov	r8, r1
 80004a6:	211d      	movs	r1, #29
 80004a8:	1acb      	subs	r3, r1, r3
 80004aa:	4651      	mov	r1, sl
 80004ac:	40d9      	lsrs	r1, r3
 80004ae:	000b      	movs	r3, r1
 80004b0:	4641      	mov	r1, r8
 80004b2:	430b      	orrs	r3, r1
 80004b4:	469b      	mov	fp, r3
 80004b6:	4653      	mov	r3, sl
 80004b8:	4093      	lsls	r3, r2
 80004ba:	001a      	movs	r2, r3
 80004bc:	9b00      	ldr	r3, [sp, #0]
 80004be:	4925      	ldr	r1, [pc, #148]	; (8000554 <__aeabi_ddiv+0x2a0>)
 80004c0:	469c      	mov	ip, r3
 80004c2:	4460      	add	r0, ip
 80004c4:	0003      	movs	r3, r0
 80004c6:	468c      	mov	ip, r1
 80004c8:	4463      	add	r3, ip
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e737      	b.n	8000340 <__aeabi_ddiv+0x8c>
 80004d0:	2303      	movs	r3, #3
 80004d2:	46b1      	mov	r9, r6
 80004d4:	9000      	str	r0, [sp, #0]
 80004d6:	260c      	movs	r6, #12
 80004d8:	9302      	str	r3, [sp, #8]
 80004da:	e711      	b.n	8000300 <__aeabi_ddiv+0x4c>
 80004dc:	2300      	movs	r3, #0
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	2604      	movs	r6, #4
 80004e4:	2700      	movs	r7, #0
 80004e6:	9302      	str	r3, [sp, #8]
 80004e8:	e70a      	b.n	8000300 <__aeabi_ddiv+0x4c>
 80004ea:	2303      	movs	r3, #3
 80004ec:	46c3      	mov	fp, r8
 80004ee:	431e      	orrs	r6, r3
 80004f0:	2103      	movs	r1, #3
 80004f2:	e725      	b.n	8000340 <__aeabi_ddiv+0x8c>
 80004f4:	3301      	adds	r3, #1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	2200      	movs	r2, #0
 80004fa:	2101      	movs	r1, #1
 80004fc:	e720      	b.n	8000340 <__aeabi_ddiv+0x8c>
 80004fe:	2300      	movs	r3, #0
 8000500:	469a      	mov	sl, r3
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	2700      	movs	r7, #0
 8000506:	031b      	lsls	r3, r3, #12
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <__aeabi_ddiv+0x27c>)
 800050a:	e761      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	4649      	mov	r1, r9
 8000510:	031b      	lsls	r3, r3, #12
 8000512:	4219      	tst	r1, r3
 8000514:	d100      	bne.n	8000518 <__aeabi_ddiv+0x264>
 8000516:	e0e2      	b.n	80006de <__aeabi_ddiv+0x42a>
 8000518:	4659      	mov	r1, fp
 800051a:	4219      	tst	r1, r3
 800051c:	d000      	beq.n	8000520 <__aeabi_ddiv+0x26c>
 800051e:	e0de      	b.n	80006de <__aeabi_ddiv+0x42a>
 8000520:	430b      	orrs	r3, r1
 8000522:	031b      	lsls	r3, r3, #12
 8000524:	0017      	movs	r7, r2
 8000526:	0b1b      	lsrs	r3, r3, #12
 8000528:	46a2      	mov	sl, r4
 800052a:	4a01      	ldr	r2, [pc, #4]	; (8000530 <__aeabi_ddiv+0x27c>)
 800052c:	e750      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	000007ff 	.word	0x000007ff
 8000534:	fffffc01 	.word	0xfffffc01
 8000538:	080037d4 	.word	0x080037d4
 800053c:	000003ff 	.word	0x000003ff
 8000540:	feffffff 	.word	0xfeffffff
 8000544:	000007fe 	.word	0x000007fe
 8000548:	800fffff 	.word	0x800fffff
 800054c:	fffffc0d 	.word	0xfffffc0d
 8000550:	fffff801 	.word	0xfffff801
 8000554:	000003f3 	.word	0x000003f3
 8000558:	45d9      	cmp	r9, fp
 800055a:	d900      	bls.n	800055e <__aeabi_ddiv+0x2aa>
 800055c:	e0cb      	b.n	80006f6 <__aeabi_ddiv+0x442>
 800055e:	d100      	bne.n	8000562 <__aeabi_ddiv+0x2ae>
 8000560:	e0c6      	b.n	80006f0 <__aeabi_ddiv+0x43c>
 8000562:	003c      	movs	r4, r7
 8000564:	4648      	mov	r0, r9
 8000566:	2700      	movs	r7, #0
 8000568:	9b00      	ldr	r3, [sp, #0]
 800056a:	3b01      	subs	r3, #1
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	465b      	mov	r3, fp
 8000570:	0e16      	lsrs	r6, r2, #24
 8000572:	021b      	lsls	r3, r3, #8
 8000574:	431e      	orrs	r6, r3
 8000576:	0213      	lsls	r3, r2, #8
 8000578:	4698      	mov	r8, r3
 800057a:	0433      	lsls	r3, r6, #16
 800057c:	0c1b      	lsrs	r3, r3, #16
 800057e:	4699      	mov	r9, r3
 8000580:	0c31      	lsrs	r1, r6, #16
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	f7ff fe46 	bl	8000214 <__aeabi_uidivmod>
 8000588:	464a      	mov	r2, r9
 800058a:	4342      	muls	r2, r0
 800058c:	040b      	lsls	r3, r1, #16
 800058e:	0c21      	lsrs	r1, r4, #16
 8000590:	0005      	movs	r5, r0
 8000592:	4319      	orrs	r1, r3
 8000594:	428a      	cmp	r2, r1
 8000596:	d907      	bls.n	80005a8 <__aeabi_ddiv+0x2f4>
 8000598:	1989      	adds	r1, r1, r6
 800059a:	3d01      	subs	r5, #1
 800059c:	428e      	cmp	r6, r1
 800059e:	d803      	bhi.n	80005a8 <__aeabi_ddiv+0x2f4>
 80005a0:	428a      	cmp	r2, r1
 80005a2:	d901      	bls.n	80005a8 <__aeabi_ddiv+0x2f4>
 80005a4:	1e85      	subs	r5, r0, #2
 80005a6:	1989      	adds	r1, r1, r6
 80005a8:	1a88      	subs	r0, r1, r2
 80005aa:	9901      	ldr	r1, [sp, #4]
 80005ac:	f7ff fe32 	bl	8000214 <__aeabi_uidivmod>
 80005b0:	0409      	lsls	r1, r1, #16
 80005b2:	468c      	mov	ip, r1
 80005b4:	464a      	mov	r2, r9
 80005b6:	0421      	lsls	r1, r4, #16
 80005b8:	4664      	mov	r4, ip
 80005ba:	4342      	muls	r2, r0
 80005bc:	0c09      	lsrs	r1, r1, #16
 80005be:	0003      	movs	r3, r0
 80005c0:	4321      	orrs	r1, r4
 80005c2:	428a      	cmp	r2, r1
 80005c4:	d904      	bls.n	80005d0 <__aeabi_ddiv+0x31c>
 80005c6:	1989      	adds	r1, r1, r6
 80005c8:	3b01      	subs	r3, #1
 80005ca:	428e      	cmp	r6, r1
 80005cc:	d800      	bhi.n	80005d0 <__aeabi_ddiv+0x31c>
 80005ce:	e0f1      	b.n	80007b4 <__aeabi_ddiv+0x500>
 80005d0:	042d      	lsls	r5, r5, #16
 80005d2:	431d      	orrs	r5, r3
 80005d4:	46ab      	mov	fp, r5
 80005d6:	4643      	mov	r3, r8
 80005d8:	1a89      	subs	r1, r1, r2
 80005da:	4642      	mov	r2, r8
 80005dc:	0c28      	lsrs	r0, r5, #16
 80005de:	0412      	lsls	r2, r2, #16
 80005e0:	0c1d      	lsrs	r5, r3, #16
 80005e2:	465b      	mov	r3, fp
 80005e4:	0c14      	lsrs	r4, r2, #16
 80005e6:	0022      	movs	r2, r4
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	0c1b      	lsrs	r3, r3, #16
 80005ec:	435a      	muls	r2, r3
 80005ee:	9403      	str	r4, [sp, #12]
 80005f0:	436b      	muls	r3, r5
 80005f2:	4344      	muls	r4, r0
 80005f4:	9502      	str	r5, [sp, #8]
 80005f6:	4368      	muls	r0, r5
 80005f8:	191b      	adds	r3, r3, r4
 80005fa:	0c15      	lsrs	r5, r2, #16
 80005fc:	18eb      	adds	r3, r5, r3
 80005fe:	429c      	cmp	r4, r3
 8000600:	d903      	bls.n	800060a <__aeabi_ddiv+0x356>
 8000602:	2480      	movs	r4, #128	; 0x80
 8000604:	0264      	lsls	r4, r4, #9
 8000606:	46a4      	mov	ip, r4
 8000608:	4460      	add	r0, ip
 800060a:	0c1c      	lsrs	r4, r3, #16
 800060c:	0415      	lsls	r5, r2, #16
 800060e:	041b      	lsls	r3, r3, #16
 8000610:	0c2d      	lsrs	r5, r5, #16
 8000612:	1820      	adds	r0, r4, r0
 8000614:	195d      	adds	r5, r3, r5
 8000616:	4281      	cmp	r1, r0
 8000618:	d377      	bcc.n	800070a <__aeabi_ddiv+0x456>
 800061a:	d073      	beq.n	8000704 <__aeabi_ddiv+0x450>
 800061c:	1a0c      	subs	r4, r1, r0
 800061e:	4aa2      	ldr	r2, [pc, #648]	; (80008a8 <__aeabi_ddiv+0x5f4>)
 8000620:	1b7d      	subs	r5, r7, r5
 8000622:	42af      	cmp	r7, r5
 8000624:	41bf      	sbcs	r7, r7
 8000626:	4694      	mov	ip, r2
 8000628:	9b00      	ldr	r3, [sp, #0]
 800062a:	427f      	negs	r7, r7
 800062c:	4463      	add	r3, ip
 800062e:	1be0      	subs	r0, r4, r7
 8000630:	001c      	movs	r4, r3
 8000632:	4286      	cmp	r6, r0
 8000634:	d100      	bne.n	8000638 <__aeabi_ddiv+0x384>
 8000636:	e0db      	b.n	80007f0 <__aeabi_ddiv+0x53c>
 8000638:	9901      	ldr	r1, [sp, #4]
 800063a:	f7ff fdeb 	bl	8000214 <__aeabi_uidivmod>
 800063e:	464a      	mov	r2, r9
 8000640:	4342      	muls	r2, r0
 8000642:	040b      	lsls	r3, r1, #16
 8000644:	0c29      	lsrs	r1, r5, #16
 8000646:	0007      	movs	r7, r0
 8000648:	4319      	orrs	r1, r3
 800064a:	428a      	cmp	r2, r1
 800064c:	d907      	bls.n	800065e <__aeabi_ddiv+0x3aa>
 800064e:	1989      	adds	r1, r1, r6
 8000650:	3f01      	subs	r7, #1
 8000652:	428e      	cmp	r6, r1
 8000654:	d803      	bhi.n	800065e <__aeabi_ddiv+0x3aa>
 8000656:	428a      	cmp	r2, r1
 8000658:	d901      	bls.n	800065e <__aeabi_ddiv+0x3aa>
 800065a:	1e87      	subs	r7, r0, #2
 800065c:	1989      	adds	r1, r1, r6
 800065e:	1a88      	subs	r0, r1, r2
 8000660:	9901      	ldr	r1, [sp, #4]
 8000662:	f7ff fdd7 	bl	8000214 <__aeabi_uidivmod>
 8000666:	0409      	lsls	r1, r1, #16
 8000668:	464a      	mov	r2, r9
 800066a:	4689      	mov	r9, r1
 800066c:	0429      	lsls	r1, r5, #16
 800066e:	464d      	mov	r5, r9
 8000670:	4342      	muls	r2, r0
 8000672:	0c09      	lsrs	r1, r1, #16
 8000674:	0003      	movs	r3, r0
 8000676:	4329      	orrs	r1, r5
 8000678:	428a      	cmp	r2, r1
 800067a:	d907      	bls.n	800068c <__aeabi_ddiv+0x3d8>
 800067c:	1989      	adds	r1, r1, r6
 800067e:	3b01      	subs	r3, #1
 8000680:	428e      	cmp	r6, r1
 8000682:	d803      	bhi.n	800068c <__aeabi_ddiv+0x3d8>
 8000684:	428a      	cmp	r2, r1
 8000686:	d901      	bls.n	800068c <__aeabi_ddiv+0x3d8>
 8000688:	1e83      	subs	r3, r0, #2
 800068a:	1989      	adds	r1, r1, r6
 800068c:	043f      	lsls	r7, r7, #16
 800068e:	1a89      	subs	r1, r1, r2
 8000690:	003a      	movs	r2, r7
 8000692:	9f03      	ldr	r7, [sp, #12]
 8000694:	431a      	orrs	r2, r3
 8000696:	0038      	movs	r0, r7
 8000698:	0413      	lsls	r3, r2, #16
 800069a:	0c1b      	lsrs	r3, r3, #16
 800069c:	4358      	muls	r0, r3
 800069e:	4681      	mov	r9, r0
 80006a0:	9802      	ldr	r0, [sp, #8]
 80006a2:	0c15      	lsrs	r5, r2, #16
 80006a4:	436f      	muls	r7, r5
 80006a6:	4343      	muls	r3, r0
 80006a8:	4345      	muls	r5, r0
 80006aa:	4648      	mov	r0, r9
 80006ac:	0c00      	lsrs	r0, r0, #16
 80006ae:	4684      	mov	ip, r0
 80006b0:	19db      	adds	r3, r3, r7
 80006b2:	4463      	add	r3, ip
 80006b4:	429f      	cmp	r7, r3
 80006b6:	d903      	bls.n	80006c0 <__aeabi_ddiv+0x40c>
 80006b8:	2080      	movs	r0, #128	; 0x80
 80006ba:	0240      	lsls	r0, r0, #9
 80006bc:	4684      	mov	ip, r0
 80006be:	4465      	add	r5, ip
 80006c0:	4648      	mov	r0, r9
 80006c2:	0c1f      	lsrs	r7, r3, #16
 80006c4:	0400      	lsls	r0, r0, #16
 80006c6:	041b      	lsls	r3, r3, #16
 80006c8:	0c00      	lsrs	r0, r0, #16
 80006ca:	197d      	adds	r5, r7, r5
 80006cc:	1818      	adds	r0, r3, r0
 80006ce:	42a9      	cmp	r1, r5
 80006d0:	d200      	bcs.n	80006d4 <__aeabi_ddiv+0x420>
 80006d2:	e084      	b.n	80007de <__aeabi_ddiv+0x52a>
 80006d4:	d100      	bne.n	80006d8 <__aeabi_ddiv+0x424>
 80006d6:	e07f      	b.n	80007d8 <__aeabi_ddiv+0x524>
 80006d8:	2301      	movs	r3, #1
 80006da:	431a      	orrs	r2, r3
 80006dc:	e657      	b.n	800038e <__aeabi_ddiv+0xda>
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	464a      	mov	r2, r9
 80006e2:	031b      	lsls	r3, r3, #12
 80006e4:	4313      	orrs	r3, r2
 80006e6:	031b      	lsls	r3, r3, #12
 80006e8:	0b1b      	lsrs	r3, r3, #12
 80006ea:	46aa      	mov	sl, r5
 80006ec:	4a6f      	ldr	r2, [pc, #444]	; (80008ac <__aeabi_ddiv+0x5f8>)
 80006ee:	e66f      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 80006f0:	42ba      	cmp	r2, r7
 80006f2:	d900      	bls.n	80006f6 <__aeabi_ddiv+0x442>
 80006f4:	e735      	b.n	8000562 <__aeabi_ddiv+0x2ae>
 80006f6:	464b      	mov	r3, r9
 80006f8:	07dc      	lsls	r4, r3, #31
 80006fa:	0858      	lsrs	r0, r3, #1
 80006fc:	087b      	lsrs	r3, r7, #1
 80006fe:	431c      	orrs	r4, r3
 8000700:	07ff      	lsls	r7, r7, #31
 8000702:	e734      	b.n	800056e <__aeabi_ddiv+0x2ba>
 8000704:	2400      	movs	r4, #0
 8000706:	42af      	cmp	r7, r5
 8000708:	d289      	bcs.n	800061e <__aeabi_ddiv+0x36a>
 800070a:	4447      	add	r7, r8
 800070c:	4547      	cmp	r7, r8
 800070e:	41a4      	sbcs	r4, r4
 8000710:	465b      	mov	r3, fp
 8000712:	4264      	negs	r4, r4
 8000714:	19a4      	adds	r4, r4, r6
 8000716:	1864      	adds	r4, r4, r1
 8000718:	3b01      	subs	r3, #1
 800071a:	42a6      	cmp	r6, r4
 800071c:	d21e      	bcs.n	800075c <__aeabi_ddiv+0x4a8>
 800071e:	42a0      	cmp	r0, r4
 8000720:	d86d      	bhi.n	80007fe <__aeabi_ddiv+0x54a>
 8000722:	d100      	bne.n	8000726 <__aeabi_ddiv+0x472>
 8000724:	e0b6      	b.n	8000894 <__aeabi_ddiv+0x5e0>
 8000726:	1a24      	subs	r4, r4, r0
 8000728:	469b      	mov	fp, r3
 800072a:	e778      	b.n	800061e <__aeabi_ddiv+0x36a>
 800072c:	0003      	movs	r3, r0
 800072e:	465a      	mov	r2, fp
 8000730:	3b28      	subs	r3, #40	; 0x28
 8000732:	409a      	lsls	r2, r3
 8000734:	2700      	movs	r7, #0
 8000736:	4691      	mov	r9, r2
 8000738:	e688      	b.n	800044c <__aeabi_ddiv+0x198>
 800073a:	4658      	mov	r0, fp
 800073c:	f000 f976 	bl	8000a2c <__clzsi2>
 8000740:	3020      	adds	r0, #32
 8000742:	e672      	b.n	800042a <__aeabi_ddiv+0x176>
 8000744:	0003      	movs	r3, r0
 8000746:	4652      	mov	r2, sl
 8000748:	3b28      	subs	r3, #40	; 0x28
 800074a:	409a      	lsls	r2, r3
 800074c:	4693      	mov	fp, r2
 800074e:	2200      	movs	r2, #0
 8000750:	e6b4      	b.n	80004bc <__aeabi_ddiv+0x208>
 8000752:	4650      	mov	r0, sl
 8000754:	f000 f96a 	bl	8000a2c <__clzsi2>
 8000758:	3020      	adds	r0, #32
 800075a:	e69a      	b.n	8000492 <__aeabi_ddiv+0x1de>
 800075c:	42a6      	cmp	r6, r4
 800075e:	d1e2      	bne.n	8000726 <__aeabi_ddiv+0x472>
 8000760:	45b8      	cmp	r8, r7
 8000762:	d9dc      	bls.n	800071e <__aeabi_ddiv+0x46a>
 8000764:	1a34      	subs	r4, r6, r0
 8000766:	469b      	mov	fp, r3
 8000768:	e759      	b.n	800061e <__aeabi_ddiv+0x36a>
 800076a:	2b1f      	cmp	r3, #31
 800076c:	dc65      	bgt.n	800083a <__aeabi_ddiv+0x586>
 800076e:	4c50      	ldr	r4, [pc, #320]	; (80008b0 <__aeabi_ddiv+0x5fc>)
 8000770:	9900      	ldr	r1, [sp, #0]
 8000772:	46a4      	mov	ip, r4
 8000774:	465c      	mov	r4, fp
 8000776:	4461      	add	r1, ip
 8000778:	0008      	movs	r0, r1
 800077a:	408c      	lsls	r4, r1
 800077c:	0011      	movs	r1, r2
 800077e:	4082      	lsls	r2, r0
 8000780:	40d9      	lsrs	r1, r3
 8000782:	1e50      	subs	r0, r2, #1
 8000784:	4182      	sbcs	r2, r0
 8000786:	430c      	orrs	r4, r1
 8000788:	4314      	orrs	r4, r2
 800078a:	465a      	mov	r2, fp
 800078c:	40da      	lsrs	r2, r3
 800078e:	0013      	movs	r3, r2
 8000790:	0762      	lsls	r2, r4, #29
 8000792:	d009      	beq.n	80007a8 <__aeabi_ddiv+0x4f4>
 8000794:	220f      	movs	r2, #15
 8000796:	4022      	ands	r2, r4
 8000798:	2a04      	cmp	r2, #4
 800079a:	d005      	beq.n	80007a8 <__aeabi_ddiv+0x4f4>
 800079c:	0022      	movs	r2, r4
 800079e:	1d14      	adds	r4, r2, #4
 80007a0:	4294      	cmp	r4, r2
 80007a2:	4189      	sbcs	r1, r1
 80007a4:	4249      	negs	r1, r1
 80007a6:	185b      	adds	r3, r3, r1
 80007a8:	021a      	lsls	r2, r3, #8
 80007aa:	d562      	bpl.n	8000872 <__aeabi_ddiv+0x5be>
 80007ac:	2201      	movs	r2, #1
 80007ae:	2300      	movs	r3, #0
 80007b0:	2700      	movs	r7, #0
 80007b2:	e60d      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 80007b4:	428a      	cmp	r2, r1
 80007b6:	d800      	bhi.n	80007ba <__aeabi_ddiv+0x506>
 80007b8:	e70a      	b.n	80005d0 <__aeabi_ddiv+0x31c>
 80007ba:	1e83      	subs	r3, r0, #2
 80007bc:	1989      	adds	r1, r1, r6
 80007be:	e707      	b.n	80005d0 <__aeabi_ddiv+0x31c>
 80007c0:	230f      	movs	r3, #15
 80007c2:	4013      	ands	r3, r2
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d100      	bne.n	80007ca <__aeabi_ddiv+0x516>
 80007c8:	e5e6      	b.n	8000398 <__aeabi_ddiv+0xe4>
 80007ca:	1d17      	adds	r7, r2, #4
 80007cc:	4297      	cmp	r7, r2
 80007ce:	4192      	sbcs	r2, r2
 80007d0:	4253      	negs	r3, r2
 80007d2:	449b      	add	fp, r3
 80007d4:	08fa      	lsrs	r2, r7, #3
 80007d6:	e5e0      	b.n	800039a <__aeabi_ddiv+0xe6>
 80007d8:	2800      	cmp	r0, #0
 80007da:	d100      	bne.n	80007de <__aeabi_ddiv+0x52a>
 80007dc:	e5d7      	b.n	800038e <__aeabi_ddiv+0xda>
 80007de:	1871      	adds	r1, r6, r1
 80007e0:	1e53      	subs	r3, r2, #1
 80007e2:	42b1      	cmp	r1, r6
 80007e4:	d327      	bcc.n	8000836 <__aeabi_ddiv+0x582>
 80007e6:	42a9      	cmp	r1, r5
 80007e8:	d315      	bcc.n	8000816 <__aeabi_ddiv+0x562>
 80007ea:	d058      	beq.n	800089e <__aeabi_ddiv+0x5ea>
 80007ec:	001a      	movs	r2, r3
 80007ee:	e773      	b.n	80006d8 <__aeabi_ddiv+0x424>
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	dc00      	bgt.n	80007f6 <__aeabi_ddiv+0x542>
 80007f4:	e604      	b.n	8000400 <__aeabi_ddiv+0x14c>
 80007f6:	2301      	movs	r3, #1
 80007f8:	2200      	movs	r2, #0
 80007fa:	449b      	add	fp, r3
 80007fc:	e5cd      	b.n	800039a <__aeabi_ddiv+0xe6>
 80007fe:	2302      	movs	r3, #2
 8000800:	4447      	add	r7, r8
 8000802:	4547      	cmp	r7, r8
 8000804:	4189      	sbcs	r1, r1
 8000806:	425b      	negs	r3, r3
 8000808:	469c      	mov	ip, r3
 800080a:	4249      	negs	r1, r1
 800080c:	1989      	adds	r1, r1, r6
 800080e:	190c      	adds	r4, r1, r4
 8000810:	44e3      	add	fp, ip
 8000812:	1a24      	subs	r4, r4, r0
 8000814:	e703      	b.n	800061e <__aeabi_ddiv+0x36a>
 8000816:	4643      	mov	r3, r8
 8000818:	005f      	lsls	r7, r3, #1
 800081a:	4547      	cmp	r7, r8
 800081c:	419b      	sbcs	r3, r3
 800081e:	46b8      	mov	r8, r7
 8000820:	425b      	negs	r3, r3
 8000822:	199e      	adds	r6, r3, r6
 8000824:	3a02      	subs	r2, #2
 8000826:	1989      	adds	r1, r1, r6
 8000828:	42a9      	cmp	r1, r5
 800082a:	d000      	beq.n	800082e <__aeabi_ddiv+0x57a>
 800082c:	e754      	b.n	80006d8 <__aeabi_ddiv+0x424>
 800082e:	4540      	cmp	r0, r8
 8000830:	d000      	beq.n	8000834 <__aeabi_ddiv+0x580>
 8000832:	e751      	b.n	80006d8 <__aeabi_ddiv+0x424>
 8000834:	e5ab      	b.n	800038e <__aeabi_ddiv+0xda>
 8000836:	001a      	movs	r2, r3
 8000838:	e7f6      	b.n	8000828 <__aeabi_ddiv+0x574>
 800083a:	211f      	movs	r1, #31
 800083c:	465f      	mov	r7, fp
 800083e:	4249      	negs	r1, r1
 8000840:	1b0c      	subs	r4, r1, r4
 8000842:	40e7      	lsrs	r7, r4
 8000844:	2b20      	cmp	r3, #32
 8000846:	d007      	beq.n	8000858 <__aeabi_ddiv+0x5a4>
 8000848:	491a      	ldr	r1, [pc, #104]	; (80008b4 <__aeabi_ddiv+0x600>)
 800084a:	9b00      	ldr	r3, [sp, #0]
 800084c:	468c      	mov	ip, r1
 800084e:	4463      	add	r3, ip
 8000850:	0018      	movs	r0, r3
 8000852:	465b      	mov	r3, fp
 8000854:	4083      	lsls	r3, r0
 8000856:	431a      	orrs	r2, r3
 8000858:	1e50      	subs	r0, r2, #1
 800085a:	4182      	sbcs	r2, r0
 800085c:	433a      	orrs	r2, r7
 800085e:	2707      	movs	r7, #7
 8000860:	2300      	movs	r3, #0
 8000862:	4017      	ands	r7, r2
 8000864:	d009      	beq.n	800087a <__aeabi_ddiv+0x5c6>
 8000866:	210f      	movs	r1, #15
 8000868:	2300      	movs	r3, #0
 800086a:	4011      	ands	r1, r2
 800086c:	0014      	movs	r4, r2
 800086e:	2904      	cmp	r1, #4
 8000870:	d195      	bne.n	800079e <__aeabi_ddiv+0x4ea>
 8000872:	0022      	movs	r2, r4
 8000874:	075f      	lsls	r7, r3, #29
 8000876:	025b      	lsls	r3, r3, #9
 8000878:	0b1b      	lsrs	r3, r3, #12
 800087a:	08d2      	lsrs	r2, r2, #3
 800087c:	4317      	orrs	r7, r2
 800087e:	2200      	movs	r2, #0
 8000880:	e5a6      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	4659      	mov	r1, fp
 8000886:	031b      	lsls	r3, r3, #12
 8000888:	430b      	orrs	r3, r1
 800088a:	031b      	lsls	r3, r3, #12
 800088c:	0017      	movs	r7, r2
 800088e:	0b1b      	lsrs	r3, r3, #12
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <__aeabi_ddiv+0x5f8>)
 8000892:	e59d      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 8000894:	42bd      	cmp	r5, r7
 8000896:	d8b2      	bhi.n	80007fe <__aeabi_ddiv+0x54a>
 8000898:	469b      	mov	fp, r3
 800089a:	2400      	movs	r4, #0
 800089c:	e6bf      	b.n	800061e <__aeabi_ddiv+0x36a>
 800089e:	4580      	cmp	r8, r0
 80008a0:	d3b9      	bcc.n	8000816 <__aeabi_ddiv+0x562>
 80008a2:	001a      	movs	r2, r3
 80008a4:	e7c3      	b.n	800082e <__aeabi_ddiv+0x57a>
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	000003ff 	.word	0x000003ff
 80008ac:	000007ff 	.word	0x000007ff
 80008b0:	0000041e 	.word	0x0000041e
 80008b4:	0000043e 	.word	0x0000043e

080008b8 <__aeabi_d2iz>:
 80008b8:	b530      	push	{r4, r5, lr}
 80008ba:	4d14      	ldr	r5, [pc, #80]	; (800090c <__aeabi_d2iz+0x54>)
 80008bc:	030a      	lsls	r2, r1, #12
 80008be:	004b      	lsls	r3, r1, #1
 80008c0:	0b12      	lsrs	r2, r2, #12
 80008c2:	0d5b      	lsrs	r3, r3, #21
 80008c4:	0fc9      	lsrs	r1, r1, #31
 80008c6:	2400      	movs	r4, #0
 80008c8:	42ab      	cmp	r3, r5
 80008ca:	dd11      	ble.n	80008f0 <__aeabi_d2iz+0x38>
 80008cc:	4c10      	ldr	r4, [pc, #64]	; (8000910 <__aeabi_d2iz+0x58>)
 80008ce:	42a3      	cmp	r3, r4
 80008d0:	dc10      	bgt.n	80008f4 <__aeabi_d2iz+0x3c>
 80008d2:	2480      	movs	r4, #128	; 0x80
 80008d4:	0364      	lsls	r4, r4, #13
 80008d6:	4322      	orrs	r2, r4
 80008d8:	4c0e      	ldr	r4, [pc, #56]	; (8000914 <__aeabi_d2iz+0x5c>)
 80008da:	1ae4      	subs	r4, r4, r3
 80008dc:	2c1f      	cmp	r4, #31
 80008de:	dd0c      	ble.n	80008fa <__aeabi_d2iz+0x42>
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <__aeabi_d2iz+0x60>)
 80008e2:	1ac3      	subs	r3, r0, r3
 80008e4:	40da      	lsrs	r2, r3
 80008e6:	0013      	movs	r3, r2
 80008e8:	425c      	negs	r4, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_d2iz+0x38>
 80008ee:	001c      	movs	r4, r3
 80008f0:	0020      	movs	r0, r4
 80008f2:	bd30      	pop	{r4, r5, pc}
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <__aeabi_d2iz+0x64>)
 80008f6:	18cc      	adds	r4, r1, r3
 80008f8:	e7fa      	b.n	80008f0 <__aeabi_d2iz+0x38>
 80008fa:	4d09      	ldr	r5, [pc, #36]	; (8000920 <__aeabi_d2iz+0x68>)
 80008fc:	40e0      	lsrs	r0, r4
 80008fe:	46ac      	mov	ip, r5
 8000900:	4463      	add	r3, ip
 8000902:	409a      	lsls	r2, r3
 8000904:	0013      	movs	r3, r2
 8000906:	4303      	orrs	r3, r0
 8000908:	e7ee      	b.n	80008e8 <__aeabi_d2iz+0x30>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	000003fe 	.word	0x000003fe
 8000910:	0000041d 	.word	0x0000041d
 8000914:	00000433 	.word	0x00000433
 8000918:	00000413 	.word	0x00000413
 800091c:	7fffffff 	.word	0x7fffffff
 8000920:	fffffbed 	.word	0xfffffbed

08000924 <__aeabi_ui2d>:
 8000924:	b510      	push	{r4, lr}
 8000926:	1e04      	subs	r4, r0, #0
 8000928:	d025      	beq.n	8000976 <__aeabi_ui2d+0x52>
 800092a:	f000 f87f 	bl	8000a2c <__clzsi2>
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <__aeabi_ui2d+0x5c>)
 8000930:	1a1b      	subs	r3, r3, r0
 8000932:	055b      	lsls	r3, r3, #21
 8000934:	0d5b      	lsrs	r3, r3, #21
 8000936:	280a      	cmp	r0, #10
 8000938:	dd12      	ble.n	8000960 <__aeabi_ui2d+0x3c>
 800093a:	380b      	subs	r0, #11
 800093c:	4084      	lsls	r4, r0
 800093e:	2200      	movs	r2, #0
 8000940:	0324      	lsls	r4, r4, #12
 8000942:	0b24      	lsrs	r4, r4, #12
 8000944:	2100      	movs	r1, #0
 8000946:	0010      	movs	r0, r2
 8000948:	0324      	lsls	r4, r4, #12
 800094a:	0d0a      	lsrs	r2, r1, #20
 800094c:	0b24      	lsrs	r4, r4, #12
 800094e:	0512      	lsls	r2, r2, #20
 8000950:	4322      	orrs	r2, r4
 8000952:	4c0c      	ldr	r4, [pc, #48]	; (8000984 <__aeabi_ui2d+0x60>)
 8000954:	051b      	lsls	r3, r3, #20
 8000956:	4022      	ands	r2, r4
 8000958:	4313      	orrs	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	0859      	lsrs	r1, r3, #1
 800095e:	bd10      	pop	{r4, pc}
 8000960:	0002      	movs	r2, r0
 8000962:	0021      	movs	r1, r4
 8000964:	3215      	adds	r2, #21
 8000966:	4091      	lsls	r1, r2
 8000968:	000a      	movs	r2, r1
 800096a:	210b      	movs	r1, #11
 800096c:	1a08      	subs	r0, r1, r0
 800096e:	40c4      	lsrs	r4, r0
 8000970:	0324      	lsls	r4, r4, #12
 8000972:	0b24      	lsrs	r4, r4, #12
 8000974:	e7e6      	b.n	8000944 <__aeabi_ui2d+0x20>
 8000976:	2300      	movs	r3, #0
 8000978:	2400      	movs	r4, #0
 800097a:	2200      	movs	r2, #0
 800097c:	e7e2      	b.n	8000944 <__aeabi_ui2d+0x20>
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	0000041e 	.word	0x0000041e
 8000984:	800fffff 	.word	0x800fffff

08000988 <__aeabi_f2d>:
 8000988:	0041      	lsls	r1, r0, #1
 800098a:	0e09      	lsrs	r1, r1, #24
 800098c:	1c4b      	adds	r3, r1, #1
 800098e:	b570      	push	{r4, r5, r6, lr}
 8000990:	b2db      	uxtb	r3, r3
 8000992:	0246      	lsls	r6, r0, #9
 8000994:	0a75      	lsrs	r5, r6, #9
 8000996:	0fc4      	lsrs	r4, r0, #31
 8000998:	2b01      	cmp	r3, #1
 800099a:	dd14      	ble.n	80009c6 <__aeabi_f2d+0x3e>
 800099c:	23e0      	movs	r3, #224	; 0xe0
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	076d      	lsls	r5, r5, #29
 80009a2:	0b36      	lsrs	r6, r6, #12
 80009a4:	18cb      	adds	r3, r1, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	0d0a      	lsrs	r2, r1, #20
 80009aa:	0028      	movs	r0, r5
 80009ac:	0512      	lsls	r2, r2, #20
 80009ae:	4d1c      	ldr	r5, [pc, #112]	; (8000a20 <__aeabi_f2d+0x98>)
 80009b0:	4332      	orrs	r2, r6
 80009b2:	055b      	lsls	r3, r3, #21
 80009b4:	402a      	ands	r2, r5
 80009b6:	085b      	lsrs	r3, r3, #1
 80009b8:	4313      	orrs	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	07e4      	lsls	r4, r4, #31
 80009be:	085b      	lsrs	r3, r3, #1
 80009c0:	4323      	orrs	r3, r4
 80009c2:	0019      	movs	r1, r3
 80009c4:	bd70      	pop	{r4, r5, r6, pc}
 80009c6:	2900      	cmp	r1, #0
 80009c8:	d114      	bne.n	80009f4 <__aeabi_f2d+0x6c>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d01e      	beq.n	8000a0c <__aeabi_f2d+0x84>
 80009ce:	0028      	movs	r0, r5
 80009d0:	f000 f82c 	bl	8000a2c <__clzsi2>
 80009d4:	280a      	cmp	r0, #10
 80009d6:	dc1c      	bgt.n	8000a12 <__aeabi_f2d+0x8a>
 80009d8:	230b      	movs	r3, #11
 80009da:	002a      	movs	r2, r5
 80009dc:	1a1b      	subs	r3, r3, r0
 80009de:	40da      	lsrs	r2, r3
 80009e0:	0003      	movs	r3, r0
 80009e2:	3315      	adds	r3, #21
 80009e4:	409d      	lsls	r5, r3
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <__aeabi_f2d+0x9c>)
 80009e8:	0312      	lsls	r2, r2, #12
 80009ea:	1a1b      	subs	r3, r3, r0
 80009ec:	055b      	lsls	r3, r3, #21
 80009ee:	0b16      	lsrs	r6, r2, #12
 80009f0:	0d5b      	lsrs	r3, r3, #21
 80009f2:	e7d8      	b.n	80009a6 <__aeabi_f2d+0x1e>
 80009f4:	2d00      	cmp	r5, #0
 80009f6:	d006      	beq.n	8000a06 <__aeabi_f2d+0x7e>
 80009f8:	0b32      	lsrs	r2, r6, #12
 80009fa:	2680      	movs	r6, #128	; 0x80
 80009fc:	0336      	lsls	r6, r6, #12
 80009fe:	076d      	lsls	r5, r5, #29
 8000a00:	4316      	orrs	r6, r2
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <__aeabi_f2d+0xa0>)
 8000a04:	e7cf      	b.n	80009a6 <__aeabi_f2d+0x1e>
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <__aeabi_f2d+0xa0>)
 8000a08:	2600      	movs	r6, #0
 8000a0a:	e7cc      	b.n	80009a6 <__aeabi_f2d+0x1e>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2600      	movs	r6, #0
 8000a10:	e7c9      	b.n	80009a6 <__aeabi_f2d+0x1e>
 8000a12:	0003      	movs	r3, r0
 8000a14:	002a      	movs	r2, r5
 8000a16:	3b0b      	subs	r3, #11
 8000a18:	409a      	lsls	r2, r3
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	e7e3      	b.n	80009e6 <__aeabi_f2d+0x5e>
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	800fffff 	.word	0x800fffff
 8000a24:	00000389 	.word	0x00000389
 8000a28:	000007ff 	.word	0x000007ff

08000a2c <__clzsi2>:
 8000a2c:	211c      	movs	r1, #28
 8000a2e:	2301      	movs	r3, #1
 8000a30:	041b      	lsls	r3, r3, #16
 8000a32:	4298      	cmp	r0, r3
 8000a34:	d301      	bcc.n	8000a3a <__clzsi2+0xe>
 8000a36:	0c00      	lsrs	r0, r0, #16
 8000a38:	3910      	subs	r1, #16
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	4298      	cmp	r0, r3
 8000a3e:	d301      	bcc.n	8000a44 <__clzsi2+0x18>
 8000a40:	0a00      	lsrs	r0, r0, #8
 8000a42:	3908      	subs	r1, #8
 8000a44:	091b      	lsrs	r3, r3, #4
 8000a46:	4298      	cmp	r0, r3
 8000a48:	d301      	bcc.n	8000a4e <__clzsi2+0x22>
 8000a4a:	0900      	lsrs	r0, r0, #4
 8000a4c:	3904      	subs	r1, #4
 8000a4e:	a202      	add	r2, pc, #8	; (adr r2, 8000a58 <__clzsi2+0x2c>)
 8000a50:	5c10      	ldrb	r0, [r2, r0]
 8000a52:	1840      	adds	r0, r0, r1
 8000a54:	4770      	bx	lr
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	02020304 	.word	0x02020304
 8000a5c:	01010101 	.word	0x01010101
	...

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f000 fd7c 	bl	8001568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f80c 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f000 f8a4 	bl	8000bc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a78:	f000 f862 	bl	8000b40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Fill(Black);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 fa6b 	bl	8000f58 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000a82:	f000 fa8d 	bl	8000fa0 <ssd1306_UpdateScreen>

  ssd1306_TestAll();
 8000a86:	f000 fd5b 	bl	8001540 <ssd1306_TestAll>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <main+0x22>

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b099      	sub	sp, #100	; 0x64
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	242c      	movs	r4, #44	; 0x2c
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	0018      	movs	r0, r3
 8000a98:	2334      	movs	r3, #52	; 0x34
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f002 fa46 	bl	8002f2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa2:	231c      	movs	r3, #28
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	001a      	movs	r2, r3
 8000aac:	2100      	movs	r1, #0
 8000aae:	f002 fa3e 	bl	8002f2e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	2318      	movs	r3, #24
 8000ab8:	001a      	movs	r2, r3
 8000aba:	2100      	movs	r1, #0
 8000abc:	f002 fa37 	bl	8002f2e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000ac0:	0021      	movs	r1, r4
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2222      	movs	r2, #34	; 0x22
 8000ac6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2201      	movs	r2, #1
 8000acc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2210      	movs	r2, #16
 8000ad8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f001 fc1a 	bl	800231c <HAL_RCC_OscConfig>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000aec:	f000 f880 	bl	8000bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	211c      	movs	r1, #28
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2207      	movs	r2, #7
 8000af6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2203      	movs	r2, #3
 8000afc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 ff8a 	bl	8002a28 <HAL_RCC_ClockConfig>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b18:	f000 f86a 	bl	8000bf0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2220      	movs	r2, #32
 8000b20:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f002 f8d4 	bl	8002cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b34:	f000 f85c 	bl	8000bf0 <Error_Handler>
  }
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b019      	add	sp, #100	; 0x64
 8000b3e:	bd90      	pop	{r4, r7, pc}

08000b40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b46:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <MX_I2C1_Init+0x78>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <MX_I2C1_Init+0x7c>)
 8000b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f000 ff95 	bl	8001aac <HAL_I2C_Init>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b86:	f000 f833 	bl	8000bf0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f001 fb2c 	bl	80021ec <HAL_I2CEx_ConfigAnalogFilter>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b98:	f000 f82a 	bl	8000bf0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <MX_I2C1_Init+0x74>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f001 fb6f 	bl	8002284 <HAL_I2CEx_ConfigDigitalFilter>
 8000ba6:	1e03      	subs	r3, r0, #0
 8000ba8:	d001      	beq.n	8000bae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000baa:	f000 f821 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200004c0 	.word	0x200004c0
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	2000090e 	.word	0x2000090e

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_GPIO_Init+0x2c>)
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_GPIO_Init+0x2c>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	03c9      	lsls	r1, r1, #15
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	615a      	str	r2, [r3, #20]
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <MX_GPIO_Init+0x2c>)
 8000bd6:	695a      	ldr	r2, [r3, #20]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	03db      	lsls	r3, r3, #15
 8000bdc:	4013      	ands	r3, r2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40021000 	.word	0x40021000

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_MspInit+0x50>)
 8000c04:	699a      	ldr	r2, [r3, #24]
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_MspInit+0x50>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	619a      	str	r2, [r3, #24]
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x50>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	2201      	movs	r2, #1
 8000c14:	4013      	ands	r3, r2
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_MspInit+0x50>)
 8000c1c:	69da      	ldr	r2, [r3, #28]
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_MspInit+0x50>)
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0549      	lsls	r1, r1, #21
 8000c24:	430a      	orrs	r2, r1
 8000c26:	61da      	str	r2, [r3, #28]
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_MspInit+0x50>)
 8000c2a:	69da      	ldr	r2, [r3, #28]
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	055b      	lsls	r3, r3, #21
 8000c30:	4013      	ands	r3, r2
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x54>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_MspInit+0x54>)
 8000c3c:	2110      	movs	r1, #16
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000

08000c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	2314      	movs	r3, #20
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	0018      	movs	r0, r3
 8000c62:	2314      	movs	r3, #20
 8000c64:	001a      	movs	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	f002 f961 	bl	8002f2e <memset>
  if(hi2c->Instance==I2C1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <HAL_I2C_MspInit+0x90>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d131      	bne.n	8000cda <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <HAL_I2C_MspInit+0x94>)
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <HAL_I2C_MspInit+0x94>)
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	03c9      	lsls	r1, r1, #15
 8000c80:	430a      	orrs	r2, r1
 8000c82:	615a      	str	r2, [r3, #20]
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_I2C_MspInit+0x94>)
 8000c86:	695a      	ldr	r2, [r3, #20]
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	03db      	lsls	r3, r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c92:	2114      	movs	r1, #20
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2203      	movs	r2, #3
 8000c98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2212      	movs	r2, #18
 8000c9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2201      	movs	r2, #1
 8000cb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_I2C_MspInit+0x98>)
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	0010      	movs	r0, r2
 8000cba:	f000 fd8f 	bl	80017dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_I2C_MspInit+0x94>)
 8000cc0:	69da      	ldr	r2, [r3, #28]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_I2C_MspInit+0x94>)
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	0389      	lsls	r1, r1, #14
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	61da      	str	r2, [r3, #28]
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_I2C_MspInit+0x94>)
 8000cce:	69da      	ldr	r2, [r3, #28]
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	039b      	lsls	r3, r3, #14
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b00a      	add	sp, #40	; 0x28
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	40005400 	.word	0x40005400
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48001400 	.word	0x48001400

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f000 fc6e 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x50>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x16>
		heap_end = &end;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <_sbrk+0x50>)
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <_sbrk+0x54>)
 8000d38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <_sbrk+0x50>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <_sbrk+0x50>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	18d3      	adds	r3, r2, r3
 8000d48:	466a      	mov	r2, sp
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d907      	bls.n	8000d5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d4e:	f002 f8b1 	bl	8002eb4 <__errno>
 8000d52:	0003      	movs	r3, r0
 8000d54:	220c      	movs	r2, #12
 8000d56:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	425b      	negs	r3, r3
 8000d5c:	e006      	b.n	8000d6c <_sbrk+0x48>
	}

	heap_end += incr;
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <_sbrk+0x50>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	18d2      	adds	r2, r2, r3
 8000d66:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <_sbrk+0x50>)
 8000d68:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b004      	add	sp, #16
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200000ac 	.word	0x200000ac
 8000d78:	20000528 	.word	0x20000528

08000d7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d88:	4813      	ldr	r0, [pc, #76]	; (8000dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <LoopForever+0x6>)
    LDR R1, [R0]
 8000d8e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d90:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d92:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <LoopForever+0xa>)
    CMP R1, R2
 8000d94:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d96:	d105      	bne.n	8000da4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000d98:	4812      	ldr	r0, [pc, #72]	; (8000de4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d9a:	4913      	ldr	r1, [pc, #76]	; (8000de8 <LoopForever+0x12>)
    STR R1, [R0]
 8000d9c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d9e:	4813      	ldr	r0, [pc, #76]	; (8000dec <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000da0:	4913      	ldr	r1, [pc, #76]	; (8000df0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000da2:	6001      	str	r1, [r0, #0]

08000da4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da4:	4813      	ldr	r0, [pc, #76]	; (8000df4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000da6:	4914      	ldr	r1, [pc, #80]	; (8000df8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <LoopForever+0x26>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000dbc:	4c11      	ldr	r4, [pc, #68]	; (8000e04 <LoopForever+0x2e>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dca:	f7ff ffd7 	bl	8000d7c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dce:	f002 f877 	bl	8002ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd2:	f7ff fe49 	bl	8000a68 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   r0, =_estack
 8000dd8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000ddc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000de0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000de4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000de8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000dec:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000df0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000dfc:	08006664 	.word	0x08006664
  ldr r2, =_sbss
 8000e00:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e04:	20000524 	.word	0x20000524

08000e08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC1_IRQHandler>

08000e0a <ssd1306_Reset>:
 */
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af04      	add	r7, sp, #16
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	1dfb      	adds	r3, r7, #7
 8000e1e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000e20:	4808      	ldr	r0, [pc, #32]	; (8000e44 <ssd1306_WriteCommand+0x30>)
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	9302      	str	r3, [sp, #8]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2301      	movs	r3, #1
 8000e32:	2200      	movs	r2, #0
 8000e34:	2178      	movs	r1, #120	; 0x78
 8000e36:	f000 fecf 	bl	8001bd8 <HAL_I2C_Mem_Write>
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	200004c0 	.word	0x200004c0

08000e48 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af04      	add	r7, sp, #16
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4808      	ldr	r0, [pc, #32]	; (8000e78 <ssd1306_WriteData+0x30>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4252      	negs	r2, r2
 8000e5c:	9202      	str	r2, [sp, #8]
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	2240      	movs	r2, #64	; 0x40
 8000e68:	2178      	movs	r1, #120	; 0x78
 8000e6a:	f000 feb5 	bl	8001bd8 <HAL_I2C_Mem_Write>
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	200004c0 	.word	0x200004c0

08000e7c <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000e80:	f7ff ffc3 	bl	8000e0a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	; 0x64
 8000e86:	f000 fbd3 	bl	8001630 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8000e8a:	20ae      	movs	r0, #174	; 0xae
 8000e8c:	f7ff ffc2 	bl	8000e14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8000e90:	2020      	movs	r0, #32
 8000e92:	f7ff ffbf 	bl	8000e14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff ffbc 	bl	8000e14 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e9c:	20b0      	movs	r0, #176	; 0xb0
 8000e9e:	f7ff ffb9 	bl	8000e14 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000ea2:	20c8      	movs	r0, #200	; 0xc8
 8000ea4:	f7ff ffb6 	bl	8000e14 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff ffb3 	bl	8000e14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000eae:	2010      	movs	r0, #16
 8000eb0:	f7ff ffb0 	bl	8000e14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000eb4:	2040      	movs	r0, #64	; 0x40
 8000eb6:	f7ff ffad 	bl	8000e14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8000eba:	2081      	movs	r0, #129	; 0x81
 8000ebc:	f7ff ffaa 	bl	8000e14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8000ec0:	20ff      	movs	r0, #255	; 0xff
 8000ec2:	f7ff ffa7 	bl	8000e14 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000ec6:	20a1      	movs	r0, #161	; 0xa1
 8000ec8:	f7ff ffa4 	bl	8000e14 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000ecc:	20a6      	movs	r0, #166	; 0xa6
 8000ece:	f7ff ffa1 	bl	8000e14 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000ed2:	20a8      	movs	r0, #168	; 0xa8
 8000ed4:	f7ff ff9e 	bl	8000e14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8000ed8:	203f      	movs	r0, #63	; 0x3f
 8000eda:	f7ff ff9b 	bl	8000e14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ede:	20a4      	movs	r0, #164	; 0xa4
 8000ee0:	f7ff ff98 	bl	8000e14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000ee4:	20d3      	movs	r0, #211	; 0xd3
 8000ee6:	f7ff ff95 	bl	8000e14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff ff92 	bl	8000e14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ef0:	20d5      	movs	r0, #213	; 0xd5
 8000ef2:	f7ff ff8f 	bl	8000e14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000ef6:	20f0      	movs	r0, #240	; 0xf0
 8000ef8:	f7ff ff8c 	bl	8000e14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000efc:	20d9      	movs	r0, #217	; 0xd9
 8000efe:	f7ff ff89 	bl	8000e14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000f02:	2022      	movs	r0, #34	; 0x22
 8000f04:	f7ff ff86 	bl	8000e14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000f08:	20da      	movs	r0, #218	; 0xda
 8000f0a:	f7ff ff83 	bl	8000e14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8000f0e:	2012      	movs	r0, #18
 8000f10:	f7ff ff80 	bl	8000e14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000f14:	20db      	movs	r0, #219	; 0xdb
 8000f16:	f7ff ff7d 	bl	8000e14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000f1a:	2020      	movs	r0, #32
 8000f1c:	f7ff ff7a 	bl	8000e14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000f20:	208d      	movs	r0, #141	; 0x8d
 8000f22:	f7ff ff77 	bl	8000e14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000f26:	2014      	movs	r0, #20
 8000f28:	f7ff ff74 	bl	8000e14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000f2c:	20af      	movs	r0, #175	; 0xaf
 8000f2e:	f7ff ff71 	bl	8000e14 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f810 	bl	8000f58 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000f38:	f000 f832 	bl	8000fa0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <ssd1306_Init+0xd8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <ssd1306_Init+0xd8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <ssd1306_Init+0xd8>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	715a      	strb	r2, [r3, #5]
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200004b0 	.word	0x200004b0

08000f58 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	0002      	movs	r2, r0
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	e00e      	b.n	8000f88 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <ssd1306_Fill+0x1e>
 8000f72:	2100      	movs	r1, #0
 8000f74:	e000      	b.n	8000f78 <ssd1306_Fill+0x20>
 8000f76:	21ff      	movs	r1, #255	; 0xff
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <ssd1306_Fill+0x40>)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	18d3      	adds	r3, r2, r3
 8000f7e:	1c0a      	adds	r2, r1, #0
 8000f80:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <ssd1306_Fill+0x44>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d9ec      	bls.n	8000f6a <ssd1306_Fill+0x12>
    }
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b004      	add	sp, #16
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200000b0 	.word	0x200000b0
 8000f9c:	000003ff 	.word	0x000003ff

08000fa0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e01a      	b.n	8000fe4 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i);
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	3b50      	subs	r3, #80	; 0x50
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff ff2c 	bl	8000e14 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff ff29 	bl	8000e14 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000fc2:	2010      	movs	r0, #16
 8000fc4:	f7ff ff26 	bl	8000e14 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	01da      	lsls	r2, r3, #7
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <ssd1306_UpdateScreen+0x54>)
 8000fd0:	18d3      	adds	r3, r2, r3
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff ff37 	bl	8000e48 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	3201      	adds	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	1dfb      	adds	r3, r7, #7
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	d9e0      	bls.n	8000fae <ssd1306_UpdateScreen+0xe>
    }
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200000b0 	.word	0x200000b0

08000ff8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	0004      	movs	r4, r0
 8001000:	0008      	movs	r0, r1
 8001002:	0011      	movs	r1, r2
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	1c22      	adds	r2, r4, #0
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	1dbb      	adds	r3, r7, #6
 800100c:	1c02      	adds	r2, r0, #0
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	1d7b      	adds	r3, r7, #5
 8001012:	1c0a      	adds	r2, r1, #0
 8001014:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b25b      	sxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	db52      	blt.n	80010c6 <ssd1306_DrawPixel+0xce>
 8001020:	1dbb      	adds	r3, r7, #6
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b3f      	cmp	r3, #63	; 0x3f
 8001026:	d84e      	bhi.n	80010c6 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <ssd1306_DrawPixel+0xd8>)
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8001030:	1d7b      	adds	r3, r7, #5
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	425a      	negs	r2, r3
 8001036:	4153      	adcs	r3, r2
 8001038:	b2da      	uxtb	r2, r3
 800103a:	1d7b      	adds	r3, r7, #5
 800103c:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 800103e:	1d7b      	adds	r3, r7, #5
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d11e      	bne.n	8001084 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781a      	ldrb	r2, [r3, #0]
 800104a:	1dbb      	adds	r3, r7, #6
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	b2d8      	uxtb	r0, r3
 8001052:	0003      	movs	r3, r0
 8001054:	01db      	lsls	r3, r3, #7
 8001056:	18d3      	adds	r3, r2, r3
 8001058:	4a1e      	ldr	r2, [pc, #120]	; (80010d4 <ssd1306_DrawPixel+0xdc>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	b25a      	sxtb	r2, r3
 800105e:	1dbb      	adds	r3, r7, #6
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2107      	movs	r1, #7
 8001064:	400b      	ands	r3, r1
 8001066:	2101      	movs	r1, #1
 8001068:	4099      	lsls	r1, r3
 800106a:	000b      	movs	r3, r1
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b259      	sxtb	r1, r3
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	0003      	movs	r3, r0
 8001078:	01db      	lsls	r3, r3, #7
 800107a:	18d3      	adds	r3, r2, r3
 800107c:	b2c9      	uxtb	r1, r1
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <ssd1306_DrawPixel+0xdc>)
 8001080:	54d1      	strb	r1, [r2, r3]
 8001082:	e021      	b.n	80010c8 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	1dbb      	adds	r3, r7, #6
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	08db      	lsrs	r3, r3, #3
 800108e:	b2d8      	uxtb	r0, r3
 8001090:	0003      	movs	r3, r0
 8001092:	01db      	lsls	r3, r3, #7
 8001094:	18d3      	adds	r3, r2, r3
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <ssd1306_DrawPixel+0xdc>)
 8001098:	5cd3      	ldrb	r3, [r2, r3]
 800109a:	b25b      	sxtb	r3, r3
 800109c:	1dba      	adds	r2, r7, #6
 800109e:	7812      	ldrb	r2, [r2, #0]
 80010a0:	2107      	movs	r1, #7
 80010a2:	400a      	ands	r2, r1
 80010a4:	2101      	movs	r1, #1
 80010a6:	4091      	lsls	r1, r2
 80010a8:	000a      	movs	r2, r1
 80010aa:	b252      	sxtb	r2, r2
 80010ac:	43d2      	mvns	r2, r2
 80010ae:	b252      	sxtb	r2, r2
 80010b0:	4013      	ands	r3, r2
 80010b2:	b259      	sxtb	r1, r3
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	0003      	movs	r3, r0
 80010ba:	01db      	lsls	r3, r3, #7
 80010bc:	18d3      	adds	r3, r2, r3
 80010be:	b2c9      	uxtb	r1, r1
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <ssd1306_DrawPixel+0xdc>)
 80010c2:	54d1      	strb	r1, [r2, r3]
 80010c4:	e000      	b.n	80010c8 <ssd1306_DrawPixel+0xd0>
        return;
 80010c6:	46c0      	nop			; (mov r8, r8)
    }
}
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b003      	add	sp, #12
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	200004b0 	.word	0x200004b0
 80010d4:	200000b0 	.word	0x200000b0

080010d8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	0004      	movs	r4, r0
 80010e0:	1d38      	adds	r0, r7, #4
 80010e2:	6001      	str	r1, [r0, #0]
 80010e4:	6042      	str	r2, [r0, #4]
 80010e6:	0019      	movs	r1, r3
 80010e8:	200f      	movs	r0, #15
 80010ea:	183b      	adds	r3, r7, r0
 80010ec:	1c22      	adds	r2, r4, #0
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	230e      	movs	r3, #14
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	1c0a      	adds	r2, r1, #0
 80010f6:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80010f8:	183b      	adds	r3, r7, r0
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b1f      	cmp	r3, #31
 80010fe:	d904      	bls.n	800110a <ssd1306_WriteChar+0x32>
 8001100:	230f      	movs	r3, #15
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b7e      	cmp	r3, #126	; 0x7e
 8001108:	d901      	bls.n	800110e <ssd1306_WriteChar+0x36>
        return 0;
 800110a:	2300      	movs	r3, #0
 800110c:	e078      	b.n	8001200 <ssd1306_WriteChar+0x128>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800110e:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <ssd1306_WriteChar+0x130>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	001a      	movs	r2, r3
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	18d3      	adds	r3, r2, r3
 800111a:	2b80      	cmp	r3, #128	; 0x80
 800111c:	dc07      	bgt.n	800112e <ssd1306_WriteChar+0x56>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800111e:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <ssd1306_WriteChar+0x130>)
 8001120:	885b      	ldrh	r3, [r3, #2]
 8001122:	001a      	movs	r2, r3
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	785b      	ldrb	r3, [r3, #1]
 8001128:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800112a:	2b40      	cmp	r3, #64	; 0x40
 800112c:	dd01      	ble.n	8001132 <ssd1306_WriteChar+0x5a>
    {
        // Not enough space on current line
        return 0;
 800112e:	2300      	movs	r3, #0
 8001130:	e066      	b.n	8001200 <ssd1306_WriteChar+0x128>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e051      	b.n	80011dc <ssd1306_WriteChar+0x104>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	230f      	movs	r3, #15
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	3b20      	subs	r3, #32
 8001144:	1d39      	adds	r1, r7, #4
 8001146:	7849      	ldrb	r1, [r1, #1]
 8001148:	434b      	muls	r3, r1
 800114a:	0019      	movs	r1, r3
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	18cb      	adds	r3, r1, r3
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	e035      	b.n	80011ca <ssd1306_WriteChar+0xf2>
            if((b << j) & 0x8000)  {
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	409a      	lsls	r2, r3
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	4013      	ands	r3, r2
 800116a:	d014      	beq.n	8001196 <ssd1306_WriteChar+0xbe>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <ssd1306_WriteChar+0x130>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	18d3      	adds	r3, r2, r3
 8001178:	b2d8      	uxtb	r0, r3
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <ssd1306_WriteChar+0x130>)
 800117c:	885b      	ldrh	r3, [r3, #2]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	18d3      	adds	r3, r2, r3
 8001186:	b2d9      	uxtb	r1, r3
 8001188:	230e      	movs	r3, #14
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	001a      	movs	r2, r3
 8001190:	f7ff ff32 	bl	8000ff8 <ssd1306_DrawPixel>
 8001194:	e016      	b.n	80011c4 <ssd1306_WriteChar+0xec>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <ssd1306_WriteChar+0x130>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	18d3      	adds	r3, r2, r3
 80011a2:	b2d8      	uxtb	r0, r3
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <ssd1306_WriteChar+0x130>)
 80011a6:	885b      	ldrh	r3, [r3, #2]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	18d3      	adds	r3, r2, r3
 80011b0:	b2d9      	uxtb	r1, r3
 80011b2:	230e      	movs	r3, #14
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	425a      	negs	r2, r3
 80011ba:	4153      	adcs	r3, r2
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	001a      	movs	r2, r3
 80011c0:	f7ff ff1a 	bl	8000ff8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	3301      	adds	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	001a      	movs	r2, r3
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d3c3      	bcc.n	800115e <ssd1306_WriteChar+0x86>
    for(i = 0; i < Font.FontHeight; i++) {
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3301      	adds	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	785b      	ldrb	r3, [r3, #1]
 80011e0:	001a      	movs	r2, r3
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d3a7      	bcc.n	8001138 <ssd1306_WriteChar+0x60>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <ssd1306_WriteChar+0x130>)
 80011ea:	881a      	ldrh	r2, [r3, #0]
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	18d3      	adds	r3, r2, r3
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <ssd1306_WriteChar+0x130>)
 80011f8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80011fa:	230f      	movs	r3, #15
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	781b      	ldrb	r3, [r3, #0]
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b009      	add	sp, #36	; 0x24
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	200004b0 	.word	0x200004b0

0800120c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	1d38      	adds	r0, r7, #4
 8001216:	6001      	str	r1, [r0, #0]
 8001218:	6042      	str	r2, [r0, #4]
 800121a:	001a      	movs	r2, r3
 800121c:	1cfb      	adds	r3, r7, #3
 800121e:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8001220:	e014      	b.n	800124c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	7818      	ldrb	r0, [r3, #0]
 8001226:	1cfb      	adds	r3, r7, #3
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	1d3a      	adds	r2, r7, #4
 800122c:	6811      	ldr	r1, [r2, #0]
 800122e:	6852      	ldr	r2, [r2, #4]
 8001230:	f7ff ff52 	bl	80010d8 <ssd1306_WriteChar>
 8001234:	0003      	movs	r3, r0
 8001236:	001a      	movs	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d002      	beq.n	8001246 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	e008      	b.n	8001258 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3301      	adds	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1e6      	bne.n	8001222 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	781b      	ldrb	r3, [r3, #0]
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b004      	add	sp, #16
 800125e:	bd80      	pop	{r7, pc}

08001260 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	0002      	movs	r2, r0
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	1dbb      	adds	r3, r7, #6
 800126e:	1c0a      	adds	r2, r1, #0
 8001270:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <ssd1306_SetCursor+0x30>)
 800127a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800127c:	1dbb      	adds	r3, r7, #6
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b03      	ldr	r3, [pc, #12]	; (8001290 <ssd1306_SetCursor+0x30>)
 8001284:	805a      	strh	r2, [r3, #2]
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	200004b0 	.word	0x200004b0

08001294 <ssd1306_TestBorder>:
 */
#include "ssd1306.h"
#include <string.h>
#include <stdio.h>

void ssd1306_TestBorder() {
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fe5c 	bl	8000f58 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80012a0:	f000 f9bc 	bl	800161c <HAL_GetTick>
 80012a4:	0003      	movs	r3, r0
 80012a6:	60bb      	str	r3, [r7, #8]
    uint32_t end = start;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 80012ac:	230f      	movs	r3, #15
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
    uint8_t y = 0;
 80012b4:	230e      	movs	r3, #14
 80012b6:	18fb      	adds	r3, r7, r3
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
    do {
        ssd1306_DrawPixel(x, y, Black);
 80012bc:	240e      	movs	r4, #14
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	7819      	ldrb	r1, [r3, #0]
 80012c2:	230f      	movs	r3, #15
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2200      	movs	r2, #0
 80012ca:	0018      	movs	r0, r3
 80012cc:	f7ff fe94 	bl	8000ff8 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 80012d0:	193b      	adds	r3, r7, r4
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10b      	bne.n	80012f0 <ssd1306_TestBorder+0x5c>
 80012d8:	230f      	movs	r3, #15
 80012da:	18fb      	adds	r3, r7, r3
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b7e      	cmp	r3, #126	; 0x7e
 80012e0:	d806      	bhi.n	80012f0 <ssd1306_TestBorder+0x5c>
            x++;
 80012e2:	210f      	movs	r1, #15
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	3201      	adds	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e027      	b.n	8001340 <ssd1306_TestBorder+0xac>
        else if((x == 127) && (y < 63))
 80012f0:	230f      	movs	r3, #15
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b7f      	cmp	r3, #127	; 0x7f
 80012f8:	d10b      	bne.n	8001312 <ssd1306_TestBorder+0x7e>
 80012fa:	230e      	movs	r3, #14
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b3e      	cmp	r3, #62	; 0x3e
 8001302:	d806      	bhi.n	8001312 <ssd1306_TestBorder+0x7e>
            y++;
 8001304:	210e      	movs	r1, #14
 8001306:	187b      	adds	r3, r7, r1
 8001308:	781a      	ldrb	r2, [r3, #0]
 800130a:	187b      	adds	r3, r7, r1
 800130c:	3201      	adds	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
 8001310:	e016      	b.n	8001340 <ssd1306_TestBorder+0xac>
        else if((y == 63) && (x > 0)) 
 8001312:	230e      	movs	r3, #14
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b3f      	cmp	r3, #63	; 0x3f
 800131a:	d10b      	bne.n	8001334 <ssd1306_TestBorder+0xa0>
 800131c:	230f      	movs	r3, #15
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <ssd1306_TestBorder+0xa0>
            x--;
 8001326:	210f      	movs	r1, #15
 8001328:	187b      	adds	r3, r7, r1
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	187b      	adds	r3, r7, r1
 800132e:	3a01      	subs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
 8001332:	e005      	b.n	8001340 <ssd1306_TestBorder+0xac>
        else
            y--;
 8001334:	210e      	movs	r1, #14
 8001336:	187b      	adds	r3, r7, r1
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	187b      	adds	r3, r7, r1
 800133c:	3a01      	subs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]

        ssd1306_DrawPixel(x, y, White);
 8001340:	230e      	movs	r3, #14
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	7819      	ldrb	r1, [r3, #0]
 8001346:	230f      	movs	r3, #15
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2201      	movs	r2, #1
 800134e:	0018      	movs	r0, r3
 8001350:	f7ff fe52 	bl	8000ff8 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8001354:	f7ff fe24 	bl	8000fa0 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8001358:	2005      	movs	r0, #5
 800135a:	f000 f969 	bl	8001630 <HAL_Delay>
        end = HAL_GetTick();
 800135e:	f000 f95d 	bl	800161c <HAL_GetTick>
 8001362:	0003      	movs	r3, r0
 8001364:	607b      	str	r3, [r7, #4]
    } while((end - start) < 8000);
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	4a05      	ldr	r2, [pc, #20]	; (8001384 <ssd1306_TestBorder+0xf0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d9a4      	bls.n	80012bc <ssd1306_TestBorder+0x28>
   
    HAL_Delay(1000);
 8001372:	23fa      	movs	r3, #250	; 0xfa
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	0018      	movs	r0, r3
 8001378:	f000 f95a 	bl	8001630 <HAL_Delay>
}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b005      	add	sp, #20
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	00001f3f 	.word	0x00001f3f

08001388 <ssd1306_TestFonts>:

void ssd1306_TestFonts() {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff fde3 	bl	8000f58 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 8001392:	2100      	movs	r1, #0
 8001394:	2002      	movs	r0, #2
 8001396:	f7ff ff63 	bl	8001260 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 800139a:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <ssd1306_TestFonts+0x6c>)
 800139c:	4816      	ldr	r0, [pc, #88]	; (80013f8 <ssd1306_TestFonts+0x70>)
 800139e:	2301      	movs	r3, #1
 80013a0:	6811      	ldr	r1, [r2, #0]
 80013a2:	6852      	ldr	r2, [r2, #4]
 80013a4:	f7ff ff32 	bl	800120c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 80013a8:	211a      	movs	r1, #26
 80013aa:	2002      	movs	r0, #2
 80013ac:	f7ff ff58 	bl	8001260 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 80013b0:	4a12      	ldr	r2, [pc, #72]	; (80013fc <ssd1306_TestFonts+0x74>)
 80013b2:	4813      	ldr	r0, [pc, #76]	; (8001400 <ssd1306_TestFonts+0x78>)
 80013b4:	2301      	movs	r3, #1
 80013b6:	6811      	ldr	r1, [r2, #0]
 80013b8:	6852      	ldr	r2, [r2, #4]
 80013ba:	f7ff ff27 	bl	800120c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 80013be:	212c      	movs	r1, #44	; 0x2c
 80013c0:	2002      	movs	r0, #2
 80013c2:	f7ff ff4d 	bl	8001260 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80013c6:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <ssd1306_TestFonts+0x7c>)
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <ssd1306_TestFonts+0x80>)
 80013ca:	2301      	movs	r3, #1
 80013cc:	6811      	ldr	r1, [r2, #0]
 80013ce:	6852      	ldr	r2, [r2, #4]
 80013d0:	f7ff ff1c 	bl	800120c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18+10);
 80013d4:	2136      	movs	r1, #54	; 0x36
 80013d6:	2002      	movs	r0, #2
 80013d8:	f7ff ff42 	bl	8001260 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <ssd1306_TestFonts+0x84>)
 80013de:	480c      	ldr	r0, [pc, #48]	; (8001410 <ssd1306_TestFonts+0x88>)
 80013e0:	2301      	movs	r3, #1
 80013e2:	6811      	ldr	r1, [r2, #0]
 80013e4:	6852      	ldr	r2, [r2, #4]
 80013e6:	f7ff ff11 	bl	800120c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80013ea:	f7ff fdd9 	bl	8000fa0 <ssd1306_UpdateScreen>
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2000001c 	.word	0x2000001c
 80013f8:	08003764 	.word	0x08003764
 80013fc:	20000014 	.word	0x20000014
 8001400:	08003770 	.word	0x08003770
 8001404:	2000000c 	.word	0x2000000c
 8001408:	0800377c 	.word	0x0800377c
 800140c:	20000004 	.word	0x20000004
 8001410:	08003788 	.word	0x08003788

08001414 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8001414:	b5b0      	push	{r4, r5, r7, lr}
 8001416:	b098      	sub	sp, #96	; 0x60
 8001418:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff fd9c 	bl	8000f58 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8001420:	f000 f8fc 	bl	800161c <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t end = start;
 8001428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800142a:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 8001430:	2344      	movs	r3, #68	; 0x44
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	4a3c      	ldr	r2, [pc, #240]	; (8001528 <ssd1306_TestFPS+0x114>)
 8001436:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001438:	c313      	stmia	r3!, {r0, r1, r4}
   
    ssd1306_SetCursor(2,0);
 800143a:	2100      	movs	r1, #0
 800143c:	2002      	movs	r0, #2
 800143e:	f7ff ff0f 	bl	8001260 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8001442:	4a3a      	ldr	r2, [pc, #232]	; (800152c <ssd1306_TestFPS+0x118>)
 8001444:	483a      	ldr	r0, [pc, #232]	; (8001530 <ssd1306_TestFPS+0x11c>)
 8001446:	2300      	movs	r3, #0
 8001448:	6811      	ldr	r1, [r2, #0]
 800144a:	6852      	ldr	r2, [r2, #4]
 800144c:	f7ff fede 	bl	800120c <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8001450:	2112      	movs	r1, #18
 8001452:	2002      	movs	r0, #2
 8001454:	f7ff ff04 	bl	8001260 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8001458:	4a34      	ldr	r2, [pc, #208]	; (800152c <ssd1306_TestFPS+0x118>)
 800145a:	2444      	movs	r4, #68	; 0x44
 800145c:	1938      	adds	r0, r7, r4
 800145e:	2300      	movs	r3, #0
 8001460:	6811      	ldr	r1, [r2, #0]
 8001462:	6852      	ldr	r2, [r2, #4]
 8001464:	f7ff fed2 	bl	800120c <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8001468:	f7ff fd9a 	bl	8000fa0 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 800146c:	2553      	movs	r5, #83	; 0x53
 800146e:	197b      	adds	r3, r7, r5
 8001470:	193a      	adds	r2, r7, r4
 8001472:	7812      	ldrb	r2, [r2, #0]
 8001474:	701a      	strb	r2, [r3, #0]
        memmove(message, message+1, sizeof(message)-2);
 8001476:	193b      	adds	r3, r7, r4
 8001478:	3301      	adds	r3, #1
 800147a:	1938      	adds	r0, r7, r4
 800147c:	220a      	movs	r2, #10
 800147e:	0019      	movs	r1, r3
 8001480:	f001 fd42 	bl	8002f08 <memmove>
        message[sizeof(message)-2] = ch;
 8001484:	193b      	adds	r3, r7, r4
 8001486:	197a      	adds	r2, r7, r5
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	729a      	strb	r2, [r3, #10]

        fps++;
 800148c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800148e:	3301      	adds	r3, #1
 8001490:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 8001492:	f000 f8c3 	bl	800161c <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	657b      	str	r3, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 800149a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800149c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	4a24      	ldr	r2, [pc, #144]	; (8001534 <ssd1306_TestFPS+0x120>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d9d4      	bls.n	8001450 <ssd1306_TestFPS+0x3c>
   
    HAL_Delay(1000);
 80014a6:	23fa      	movs	r3, #250	; 0xfa
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	0018      	movs	r0, r3
 80014ac:	f000 f8c0 	bl	8001630 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 80014b0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80014b2:	f7fe feb5 	bl	8000220 <__aeabi_i2f>
 80014b6:	1c03      	adds	r3, r0, #0
 80014b8:	1c18      	adds	r0, r3, #0
 80014ba:	f7ff fa65 	bl	8000988 <__aeabi_f2d>
 80014be:	0004      	movs	r4, r0
 80014c0:	000d      	movs	r5, r1
 80014c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80014c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff fa2b 	bl	8000924 <__aeabi_ui2d>
 80014ce:	2200      	movs	r2, #0
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <ssd1306_TestFPS+0x124>)
 80014d2:	f7fe feef 	bl	80002b4 <__aeabi_ddiv>
 80014d6:	0002      	movs	r2, r0
 80014d8:	000b      	movs	r3, r1
 80014da:	0020      	movs	r0, r4
 80014dc:	0029      	movs	r1, r5
 80014de:	f7fe fee9 	bl	80002b4 <__aeabi_ddiv>
 80014e2:	0003      	movs	r3, r0
 80014e4:	000c      	movs	r4, r1
 80014e6:	0018      	movs	r0, r3
 80014e8:	0021      	movs	r1, r4
 80014ea:	f7ff f9e5 	bl	80008b8 <__aeabi_d2iz>
 80014ee:	0003      	movs	r3, r0
 80014f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 80014f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f4:	4a11      	ldr	r2, [pc, #68]	; (800153c <ssd1306_TestFPS+0x128>)
 80014f6:	1d38      	adds	r0, r7, #4
 80014f8:	2140      	movs	r1, #64	; 0x40
 80014fa:	f001 fd21 	bl	8002f40 <sniprintf>
   
    ssd1306_Fill(White);
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff fd2a 	bl	8000f58 <ssd1306_Fill>
    ssd1306_SetCursor(2, 18);
 8001504:	2112      	movs	r1, #18
 8001506:	2002      	movs	r0, #2
 8001508:	f7ff feaa 	bl	8001260 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <ssd1306_TestFPS+0x118>)
 800150e:	1d38      	adds	r0, r7, #4
 8001510:	2300      	movs	r3, #0
 8001512:	6811      	ldr	r1, [r2, #0]
 8001514:	6852      	ldr	r2, [r2, #4]
 8001516:	f7ff fe79 	bl	800120c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800151a:	f7ff fd41 	bl	8000fa0 <ssd1306_UpdateScreen>
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b018      	add	sp, #96	; 0x60
 8001524:	bdb0      	pop	{r4, r5, r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	080037a8 	.word	0x080037a8
 800152c:	20000014 	.word	0x20000014
 8001530:	08003794 	.word	0x08003794
 8001534:	00001387 	.word	0x00001387
 8001538:	408f4000 	.word	0x408f4000
 800153c:	080037a0 	.word	0x080037a0

08001540 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001544:	f7ff fc9a 	bl	8000e7c <ssd1306_Init>
    ssd1306_TestFPS();
 8001548:	f7ff ff64 	bl	8001414 <ssd1306_TestFPS>
    HAL_Delay(3000);
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <ssd1306_TestAll+0x24>)
 800154e:	0018      	movs	r0, r3
 8001550:	f000 f86e 	bl	8001630 <HAL_Delay>
    ssd1306_TestBorder();
 8001554:	f7ff fe9e 	bl	8001294 <ssd1306_TestBorder>
    ssd1306_TestFonts();
 8001558:	f7ff ff16 	bl	8001388 <ssd1306_TestFonts>
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	00000bb8 	.word	0x00000bb8

08001568 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_Init+0x24>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_Init+0x24>)
 8001572:	2110      	movs	r1, #16
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001578:	2000      	movs	r0, #0
 800157a:	f000 f809 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157e:	f7ff fb3d 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	40022000 	.word	0x40022000

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_InitTick+0x5c>)
 800159a:	681c      	ldr	r4, [r3, #0]
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_InitTick+0x60>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	0019      	movs	r1, r3
 80015a2:	23fa      	movs	r3, #250	; 0xfa
 80015a4:	0098      	lsls	r0, r3, #2
 80015a6:	f7fe fdaf 	bl	8000108 <__udivsi3>
 80015aa:	0003      	movs	r3, r0
 80015ac:	0019      	movs	r1, r3
 80015ae:	0020      	movs	r0, r4
 80015b0:	f7fe fdaa 	bl	8000108 <__udivsi3>
 80015b4:	0003      	movs	r3, r0
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 f903 	bl	80017c2 <HAL_SYSTICK_Config>
 80015bc:	1e03      	subs	r3, r0, #0
 80015be:	d001      	beq.n	80015c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e00f      	b.n	80015e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d80b      	bhi.n	80015e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	2301      	movs	r3, #1
 80015ce:	425b      	negs	r3, r3
 80015d0:	2200      	movs	r2, #0
 80015d2:	0018      	movs	r0, r3
 80015d4:	f000 f8e0 	bl	8001798 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_InitTick+0x64>)
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b003      	add	sp, #12
 80015ea:	bd90      	pop	{r4, r7, pc}
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000028 	.word	0x20000028
 80015f4:	20000024 	.word	0x20000024

080015f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x1c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	001a      	movs	r2, r3
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x20>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	18d2      	adds	r2, r2, r3
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_IncTick+0x20>)
 800160a:	601a      	str	r2, [r3, #0]
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	20000028 	.word	0x20000028
 8001618:	2000051c 	.word	0x2000051c

0800161c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_GetTick+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	2000051c 	.word	0x2000051c

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff fff0 	bl	800161c <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3301      	adds	r3, #1
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_Delay+0x40>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	001a      	movs	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	189b      	adds	r3, r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	f7ff ffe0 	bl	800161c <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b004      	add	sp, #16
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000028 	.word	0x20000028

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	0002      	movs	r2, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b7f      	cmp	r3, #127	; 0x7f
 8001688:	d828      	bhi.n	80016dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800168a:	4a2f      	ldr	r2, [pc, #188]	; (8001748 <__NVIC_SetPriority+0xd4>)
 800168c:	1dfb      	adds	r3, r7, #7
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b25b      	sxtb	r3, r3
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	33c0      	adds	r3, #192	; 0xc0
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	589b      	ldr	r3, [r3, r2]
 800169a:	1dfa      	adds	r2, r7, #7
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	0011      	movs	r1, r2
 80016a0:	2203      	movs	r2, #3
 80016a2:	400a      	ands	r2, r1
 80016a4:	00d2      	lsls	r2, r2, #3
 80016a6:	21ff      	movs	r1, #255	; 0xff
 80016a8:	4091      	lsls	r1, r2
 80016aa:	000a      	movs	r2, r1
 80016ac:	43d2      	mvns	r2, r2
 80016ae:	401a      	ands	r2, r3
 80016b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	22ff      	movs	r2, #255	; 0xff
 80016b8:	401a      	ands	r2, r3
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	0018      	movs	r0, r3
 80016c0:	2303      	movs	r3, #3
 80016c2:	4003      	ands	r3, r0
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c8:	481f      	ldr	r0, [pc, #124]	; (8001748 <__NVIC_SetPriority+0xd4>)
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	430a      	orrs	r2, r1
 80016d4:	33c0      	adds	r3, #192	; 0xc0
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016da:	e031      	b.n	8001740 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <__NVIC_SetPriority+0xd8>)
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	0019      	movs	r1, r3
 80016e4:	230f      	movs	r3, #15
 80016e6:	400b      	ands	r3, r1
 80016e8:	3b08      	subs	r3, #8
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3306      	adds	r3, #6
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	18d3      	adds	r3, r2, r3
 80016f2:	3304      	adds	r3, #4
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	1dfa      	adds	r2, r7, #7
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	0011      	movs	r1, r2
 80016fc:	2203      	movs	r2, #3
 80016fe:	400a      	ands	r2, r1
 8001700:	00d2      	lsls	r2, r2, #3
 8001702:	21ff      	movs	r1, #255	; 0xff
 8001704:	4091      	lsls	r1, r2
 8001706:	000a      	movs	r2, r1
 8001708:	43d2      	mvns	r2, r2
 800170a:	401a      	ands	r2, r3
 800170c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	019b      	lsls	r3, r3, #6
 8001712:	22ff      	movs	r2, #255	; 0xff
 8001714:	401a      	ands	r2, r3
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	0018      	movs	r0, r3
 800171c:	2303      	movs	r3, #3
 800171e:	4003      	ands	r3, r0
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001724:	4809      	ldr	r0, [pc, #36]	; (800174c <__NVIC_SetPriority+0xd8>)
 8001726:	1dfb      	adds	r3, r7, #7
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	001c      	movs	r4, r3
 800172c:	230f      	movs	r3, #15
 800172e:	4023      	ands	r3, r4
 8001730:	3b08      	subs	r3, #8
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	430a      	orrs	r2, r1
 8001736:	3306      	adds	r3, #6
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	18c3      	adds	r3, r0, r3
 800173c:	3304      	adds	r3, #4
 800173e:	601a      	str	r2, [r3, #0]
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	b003      	add	sp, #12
 8001746:	bd90      	pop	{r4, r7, pc}
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <SysTick_Config+0x40>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e010      	b.n	8001788 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <SysTick_Config+0x44>)
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	3a01      	subs	r2, #1
 800176c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	2301      	movs	r3, #1
 8001770:	425b      	negs	r3, r3
 8001772:	2103      	movs	r1, #3
 8001774:	0018      	movs	r0, r3
 8001776:	f7ff ff7d 	bl	8001674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <SysTick_Config+0x44>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SysTick_Config+0x44>)
 8001782:	2207      	movs	r2, #7
 8001784:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001786:	2300      	movs	r3, #0
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	b002      	add	sp, #8
 800178e:	bd80      	pop	{r7, pc}
 8001790:	00ffffff 	.word	0x00ffffff
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	210f      	movs	r1, #15
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	1c02      	adds	r2, r0, #0
 80017a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	0011      	movs	r1, r2
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7ff ff5d 	bl	8001674 <__NVIC_SetPriority>
}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b004      	add	sp, #16
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff ffbf 	bl	8001750 <SysTick_Config>
 80017d2:	0003      	movs	r3, r0
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ea:	e149      	b.n	8001a80 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2101      	movs	r1, #1
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4091      	lsls	r1, r2
 80017f6:	000a      	movs	r2, r1
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d100      	bne.n	8001804 <HAL_GPIO_Init+0x28>
 8001802:	e13a      	b.n	8001a7a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x38>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b12      	cmp	r3, #18
 8001812:	d123      	bne.n	800185c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	0092      	lsls	r2, r2, #2
 800181e:	58d3      	ldr	r3, [r2, r3]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2207      	movs	r2, #7
 8001826:	4013      	ands	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	409a      	lsls	r2, r3
 800182e:	0013      	movs	r3, r2
 8001830:	43da      	mvns	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2107      	movs	r1, #7
 8001840:	400b      	ands	r3, r1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	08da      	lsrs	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3208      	adds	r2, #8
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	6939      	ldr	r1, [r7, #16]
 800185a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	409a      	lsls	r2, r3
 800186a:	0013      	movs	r3, r2
 800186c:	43da      	mvns	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2203      	movs	r2, #3
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	409a      	lsls	r2, r3
 8001882:	0013      	movs	r3, r2
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d00b      	beq.n	80018b0 <HAL_GPIO_Init+0xd4>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018a4:	2b11      	cmp	r3, #17
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b12      	cmp	r3, #18
 80018ae:	d130      	bne.n	8001912 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	409a      	lsls	r2, r3
 80018be:	0013      	movs	r3, r2
 80018c0:	43da      	mvns	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	409a      	lsls	r2, r3
 80018d2:	0013      	movs	r3, r2
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e6:	2201      	movs	r2, #1
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
 80018ec:	0013      	movs	r3, r2
 80018ee:	43da      	mvns	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	2201      	movs	r2, #1
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
 8001904:	0013      	movs	r3, r2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2203      	movs	r2, #3
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	43da      	mvns	r2, r3
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	409a      	lsls	r2, r3
 8001934:	0013      	movs	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	055b      	lsls	r3, r3, #21
 800194a:	4013      	ands	r3, r2
 800194c:	d100      	bne.n	8001950 <HAL_GPIO_Init+0x174>
 800194e:	e094      	b.n	8001a7a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001950:	4b51      	ldr	r3, [pc, #324]	; (8001a98 <HAL_GPIO_Init+0x2bc>)
 8001952:	699a      	ldr	r2, [r3, #24]
 8001954:	4b50      	ldr	r3, [pc, #320]	; (8001a98 <HAL_GPIO_Init+0x2bc>)
 8001956:	2101      	movs	r1, #1
 8001958:	430a      	orrs	r2, r1
 800195a:	619a      	str	r2, [r3, #24]
 800195c:	4b4e      	ldr	r3, [pc, #312]	; (8001a98 <HAL_GPIO_Init+0x2bc>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2201      	movs	r2, #1
 8001962:	4013      	ands	r3, r2
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001968:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	589b      	ldr	r3, [r3, r2]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2203      	movs	r2, #3
 800197a:	4013      	ands	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	409a      	lsls	r2, r3
 8001982:	0013      	movs	r3, r2
 8001984:	43da      	mvns	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	2390      	movs	r3, #144	; 0x90
 8001990:	05db      	lsls	r3, r3, #23
 8001992:	429a      	cmp	r2, r3
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x1d6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a41      	ldr	r2, [pc, #260]	; (8001aa0 <HAL_GPIO_Init+0x2c4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x1d2>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a40      	ldr	r2, [pc, #256]	; (8001aa4 <HAL_GPIO_Init+0x2c8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x1ce>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x1d8>
 80019aa:	2305      	movs	r3, #5
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x1d8>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x1d8>
 80019b2:	2300      	movs	r3, #0
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	2103      	movs	r1, #3
 80019b8:	400a      	ands	r2, r1
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019c4:	4935      	ldr	r1, [pc, #212]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d2:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <HAL_GPIO_Init+0x2cc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43da      	mvns	r2, r3
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	025b      	lsls	r3, r3, #9
 80019ea:	4013      	ands	r3, r2
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019f6:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <HAL_GPIO_Init+0x2cc>)
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_GPIO_Init+0x2cc>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	43da      	mvns	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	029b      	lsls	r3, r3, #10
 8001a14:	4013      	ands	r3, r2
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a20:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <HAL_GPIO_Init+0x2cc>)
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_GPIO_Init+0x2cc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	035b      	lsls	r3, r3, #13
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_GPIO_Init+0x2cc>)
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_GPIO_Init+0x2cc>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	039b      	lsls	r3, r3, #14
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_GPIO_Init+0x2cc>)
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	40da      	lsrs	r2, r3
 8001a88:	1e13      	subs	r3, r2, #0
 8001a8a:	d000      	beq.n	8001a8e <HAL_GPIO_Init+0x2b2>
 8001a8c:	e6ae      	b.n	80017ec <HAL_GPIO_Init+0x10>
  } 
}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b006      	add	sp, #24
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	48000400 	.word	0x48000400
 8001aa4:	48000800 	.word	0x48000800
 8001aa8:	40010400 	.word	0x40010400

08001aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e082      	b.n	8001bc4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2241      	movs	r2, #65	; 0x41
 8001ac2:	5c9b      	ldrb	r3, [r3, r2]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d107      	bne.n	8001ada <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2240      	movs	r2, #64	; 0x40
 8001ace:	2100      	movs	r1, #0
 8001ad0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff f8bd 	bl	8000c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2241      	movs	r2, #65	; 0x41
 8001ade:	2124      	movs	r1, #36	; 0x24
 8001ae0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	438a      	bics	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4934      	ldr	r1, [pc, #208]	; (8001bcc <HAL_I2C_Init+0x120>)
 8001afc:	400a      	ands	r2, r1
 8001afe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4931      	ldr	r1, [pc, #196]	; (8001bd0 <HAL_I2C_Init+0x124>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d108      	bne.n	8001b2a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	0209      	lsls	r1, r1, #8
 8001b24:	430a      	orrs	r2, r1
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	e007      	b.n	8001b3a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2184      	movs	r1, #132	; 0x84
 8001b34:	0209      	lsls	r1, r1, #8
 8001b36:	430a      	orrs	r2, r1
 8001b38:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d104      	bne.n	8001b4c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	491f      	ldr	r1, [pc, #124]	; (8001bd4 <HAL_I2C_Init+0x128>)
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	491a      	ldr	r1, [pc, #104]	; (8001bd0 <HAL_I2C_Init+0x124>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	0011      	movs	r1, r2
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	021a      	lsls	r2, r3, #8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69d9      	ldr	r1, [r3, #28]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1a      	ldr	r2, [r3, #32]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2241      	movs	r2, #65	; 0x41
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2242      	movs	r2, #66	; 0x42
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b002      	add	sp, #8
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	f0ffffff 	.word	0xf0ffffff
 8001bd0:	ffff7fff 	.word	0xffff7fff
 8001bd4:	02008000 	.word	0x02008000

08001bd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	000c      	movs	r4, r1
 8001be2:	0010      	movs	r0, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	230a      	movs	r3, #10
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	1c22      	adds	r2, r4, #0
 8001bec:	801a      	strh	r2, [r3, #0]
 8001bee:	2308      	movs	r3, #8
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	1c02      	adds	r2, r0, #0
 8001bf4:	801a      	strh	r2, [r3, #0]
 8001bf6:	1dbb      	adds	r3, r7, #6
 8001bf8:	1c0a      	adds	r2, r1, #0
 8001bfa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2241      	movs	r2, #65	; 0x41
 8001c00:	5c9b      	ldrb	r3, [r3, r2]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d000      	beq.n	8001c0a <HAL_I2C_Mem_Write+0x32>
 8001c08:	e10c      	b.n	8001e24 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <HAL_I2C_Mem_Write+0x42>
 8001c10:	232c      	movs	r3, #44	; 0x2c
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d105      	bne.n	8001c26 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2280      	movs	r2, #128	; 0x80
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0ff      	b.n	8001e26 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2240      	movs	r2, #64	; 0x40
 8001c2a:	5c9b      	ldrb	r3, [r3, r2]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_I2C_Mem_Write+0x5c>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e0f8      	b.n	8001e26 <HAL_I2C_Mem_Write+0x24e>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2240      	movs	r2, #64	; 0x40
 8001c38:	2101      	movs	r1, #1
 8001c3a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c3c:	f7ff fcee 	bl	800161c <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	0219      	lsls	r1, r3, #8
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2319      	movs	r3, #25
 8001c50:	2201      	movs	r2, #1
 8001c52:	f000 f975 	bl	8001f40 <I2C_WaitOnFlagUntilTimeout>
 8001c56:	1e03      	subs	r3, r0, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0e3      	b.n	8001e26 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2241      	movs	r2, #65	; 0x41
 8001c62:	2121      	movs	r1, #33	; 0x21
 8001c64:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2242      	movs	r2, #66	; 0x42
 8001c6a:	2140      	movs	r1, #64	; 0x40
 8001c6c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	222c      	movs	r2, #44	; 0x2c
 8001c7e:	18ba      	adds	r2, r7, r2
 8001c80:	8812      	ldrh	r2, [r2, #0]
 8001c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c8a:	1dbb      	adds	r3, r7, #6
 8001c8c:	881c      	ldrh	r4, [r3, #0]
 8001c8e:	2308      	movs	r3, #8
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	881a      	ldrh	r2, [r3, #0]
 8001c94:	230a      	movs	r3, #10
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	8819      	ldrh	r1, [r3, #0]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	0023      	movs	r3, r4
 8001ca6:	f000 f8c5 	bl	8001e34 <I2C_RequestMemoryWrite>
 8001caa:	1e03      	subs	r3, r0, #0
 8001cac:	d005      	beq.n	8001cba <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2240      	movs	r2, #64	; 0x40
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0b5      	b.n	8001e26 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	2bff      	cmp	r3, #255	; 0xff
 8001cc2:	d911      	bls.n	8001ce8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	22ff      	movs	r2, #255	; 0xff
 8001cc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	045c      	lsls	r4, r3, #17
 8001cd4:	230a      	movs	r3, #10
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	8819      	ldrh	r1, [r3, #0]
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	0023      	movs	r3, r4
 8001ce2:	f000 fa4d 	bl	8002180 <I2C_TransferConfig>
 8001ce6:	e012      	b.n	8001d0e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	049c      	lsls	r4, r3, #18
 8001cfc:	230a      	movs	r3, #10
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	8819      	ldrh	r1, [r3, #0]
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	2300      	movs	r3, #0
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	0023      	movs	r3, r4
 8001d0a:	f000 fa39 	bl	8002180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 f952 	bl	8001fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e081      	b.n	8001e26 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d03a      	beq.n	8001dd2 <HAL_I2C_Mem_Write+0x1fa>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d136      	bne.n	8001dd2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	0013      	movs	r3, r2
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	f000 f8e5 	bl	8001f40 <I2C_WaitOnFlagUntilTimeout>
 8001d76:	1e03      	subs	r3, r0, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e053      	b.n	8001e26 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2bff      	cmp	r3, #255	; 0xff
 8001d86:	d911      	bls.n	8001dac <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	22ff      	movs	r2, #255	; 0xff
 8001d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	045c      	lsls	r4, r3, #17
 8001d98:	230a      	movs	r3, #10
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	8819      	ldrh	r1, [r3, #0]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	2300      	movs	r3, #0
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	0023      	movs	r3, r4
 8001da6:	f000 f9eb 	bl	8002180 <I2C_TransferConfig>
 8001daa:	e012      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	049c      	lsls	r4, r3, #18
 8001dc0:	230a      	movs	r3, #10
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	8819      	ldrh	r1, [r3, #0]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	0023      	movs	r3, r4
 8001dce:	f000 f9d7 	bl	8002180 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d198      	bne.n	8001d0e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f92a 	bl	800203c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001de8:	1e03      	subs	r3, r0, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e01a      	b.n	8001e26 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2220      	movs	r2, #32
 8001df6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	490b      	ldr	r1, [pc, #44]	; (8001e30 <HAL_I2C_Mem_Write+0x258>)
 8001e04:	400a      	ands	r2, r1
 8001e06:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2241      	movs	r2, #65	; 0x41
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2242      	movs	r2, #66	; 0x42
 8001e14:	2100      	movs	r1, #0
 8001e16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
  }
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b007      	add	sp, #28
 8001e2c:	bd90      	pop	{r4, r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	fe00e800 	.word	0xfe00e800

08001e34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e34:	b5b0      	push	{r4, r5, r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	0010      	movs	r0, r2
 8001e40:	0019      	movs	r1, r3
 8001e42:	250a      	movs	r5, #10
 8001e44:	197b      	adds	r3, r7, r5
 8001e46:	1c22      	adds	r2, r4, #0
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	1c02      	adds	r2, r0, #0
 8001e50:	801a      	strh	r2, [r3, #0]
 8001e52:	1dbb      	adds	r3, r7, #6
 8001e54:	1c0a      	adds	r2, r1, #0
 8001e56:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e58:	1dbb      	adds	r3, r7, #6
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	045c      	lsls	r4, r3, #17
 8001e62:	197b      	adds	r3, r7, r5
 8001e64:	8819      	ldrh	r1, [r3, #0]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <I2C_RequestMemoryWrite+0xc4>)
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	0023      	movs	r3, r4
 8001e6e:	f000 f987 	bl	8002180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 f8a0 	bl	8001fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8001e7e:	1e03      	subs	r3, r0, #0
 8001e80:	d001      	beq.n	8001e86 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e033      	b.n	8001eee <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e86:	1dbb      	adds	r3, r7, #6
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e8e:	2308      	movs	r3, #8
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e9c:	e019      	b.n	8001ed2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb2:	6a39      	ldr	r1, [r7, #32]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 f881 	bl	8001fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8001ebc:	1e03      	subs	r3, r0, #0
 8001ebe:	d001      	beq.n	8001ec4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e014      	b.n	8001eee <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed2:	6a3a      	ldr	r2, [r7, #32]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	0013      	movs	r3, r2
 8001edc:	2200      	movs	r2, #0
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	f000 f82e 	bl	8001f40 <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	1e03      	subs	r3, r0, #0
 8001ee6:	d001      	beq.n	8001eec <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b004      	add	sp, #16
 8001ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	80002000 	.word	0x80002000

08001efc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d103      	bne.n	8001f1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2200      	movs	r2, #0
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2201      	movs	r2, #1
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d007      	beq.n	8001f38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2101      	movs	r1, #1
 8001f34:	430a      	orrs	r2, r1
 8001f36:	619a      	str	r2, [r3, #24]
  }
}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	1dfb      	adds	r3, r7, #7
 8001f4e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f50:	e021      	b.n	8001f96 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	d01e      	beq.n	8001f96 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f58:	f7ff fb60 	bl	800161c <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d302      	bcc.n	8001f6e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d113      	bne.n	8001f96 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	2220      	movs	r2, #32
 8001f74:	431a      	orrs	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2241      	movs	r2, #65	; 0x41
 8001f7e:	2120      	movs	r1, #32
 8001f80:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2242      	movs	r2, #66	; 0x42
 8001f86:	2100      	movs	r1, #0
 8001f88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2240      	movs	r2, #64	; 0x40
 8001f8e:	2100      	movs	r1, #0
 8001f90:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	425a      	negs	r2, r3
 8001fa6:	4153      	adcs	r3, r2
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	001a      	movs	r2, r3
 8001fac:	1dfb      	adds	r3, r7, #7
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d0ce      	beq.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b004      	add	sp, #16
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fca:	e02b      	b.n	8002024 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f000 f86e 	bl	80020b4 <I2C_IsAcknowledgeFailed>
 8001fd8:	1e03      	subs	r3, r0, #0
 8001fda:	d001      	beq.n	8001fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e029      	b.n	8002034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	d01e      	beq.n	8002024 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe6:	f7ff fb19 	bl	800161c <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d302      	bcc.n	8001ffc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d113      	bne.n	8002024 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	2220      	movs	r2, #32
 8002002:	431a      	orrs	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2241      	movs	r2, #65	; 0x41
 800200c:	2120      	movs	r1, #32
 800200e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2242      	movs	r2, #66	; 0x42
 8002014:	2100      	movs	r1, #0
 8002016:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2240      	movs	r2, #64	; 0x40
 800201c:	2100      	movs	r1, #0
 800201e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e007      	b.n	8002034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d1cc      	bne.n	8001fcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b004      	add	sp, #16
 800203a:	bd80      	pop	{r7, pc}

0800203c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002048:	e028      	b.n	800209c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0018      	movs	r0, r3
 8002052:	f000 f82f 	bl	80020b4 <I2C_IsAcknowledgeFailed>
 8002056:	1e03      	subs	r3, r0, #0
 8002058:	d001      	beq.n	800205e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e026      	b.n	80020ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205e:	f7ff fadd 	bl	800161c <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d302      	bcc.n	8002074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d113      	bne.n	800209c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	2220      	movs	r2, #32
 800207a:	431a      	orrs	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2241      	movs	r2, #65	; 0x41
 8002084:	2120      	movs	r1, #32
 8002086:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2242      	movs	r2, #66	; 0x42
 800208c:	2100      	movs	r1, #0
 800208e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2240      	movs	r2, #64	; 0x40
 8002094:	2100      	movs	r1, #0
 8002096:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e007      	b.n	80020ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2220      	movs	r2, #32
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d1cf      	bne.n	800204a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b004      	add	sp, #16
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2210      	movs	r2, #16
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	d151      	bne.n	8002172 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ce:	e021      	b.n	8002114 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	3301      	adds	r3, #1
 80020d4:	d01e      	beq.n	8002114 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d6:	f7ff faa1 	bl	800161c <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d302      	bcc.n	80020ec <I2C_IsAcknowledgeFailed+0x38>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d113      	bne.n	8002114 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	2220      	movs	r2, #32
 80020f2:	431a      	orrs	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2241      	movs	r2, #65	; 0x41
 80020fc:	2120      	movs	r1, #32
 80020fe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2242      	movs	r2, #66	; 0x42
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2240      	movs	r2, #64	; 0x40
 800210c:	2100      	movs	r1, #0
 800210e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e02f      	b.n	8002174 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2220      	movs	r2, #32
 800211c:	4013      	ands	r3, r2
 800211e:	2b20      	cmp	r3, #32
 8002120:	d1d6      	bne.n	80020d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2210      	movs	r2, #16
 8002128:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2220      	movs	r2, #32
 8002130:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	0018      	movs	r0, r3
 8002136:	f7ff fee1 	bl	8001efc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	490d      	ldr	r1, [pc, #52]	; (800217c <I2C_IsAcknowledgeFailed+0xc8>)
 8002146:	400a      	ands	r2, r1
 8002148:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	2204      	movs	r2, #4
 8002150:	431a      	orrs	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2241      	movs	r2, #65	; 0x41
 800215a:	2120      	movs	r1, #32
 800215c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2242      	movs	r2, #66	; 0x42
 8002162:	2100      	movs	r1, #0
 8002164:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2240      	movs	r2, #64	; 0x40
 800216a:	2100      	movs	r1, #0
 800216c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b004      	add	sp, #16
 800217a:	bd80      	pop	{r7, pc}
 800217c:	fe00e800 	.word	0xfe00e800

08002180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	0008      	movs	r0, r1
 800218a:	0011      	movs	r1, r2
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	240a      	movs	r4, #10
 8002190:	193b      	adds	r3, r7, r4
 8002192:	1c02      	adds	r2, r0, #0
 8002194:	801a      	strh	r2, [r3, #0]
 8002196:	2009      	movs	r0, #9
 8002198:	183b      	adds	r3, r7, r0
 800219a:	1c0a      	adds	r2, r1, #0
 800219c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	6a3a      	ldr	r2, [r7, #32]
 80021a6:	0d51      	lsrs	r1, r2, #21
 80021a8:	2280      	movs	r2, #128	; 0x80
 80021aa:	00d2      	lsls	r2, r2, #3
 80021ac:	400a      	ands	r2, r1
 80021ae:	490e      	ldr	r1, [pc, #56]	; (80021e8 <I2C_TransferConfig+0x68>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	43d2      	mvns	r2, r2
 80021b4:	401a      	ands	r2, r3
 80021b6:	0011      	movs	r1, r2
 80021b8:	193b      	adds	r3, r7, r4
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	059b      	lsls	r3, r3, #22
 80021be:	0d9a      	lsrs	r2, r3, #22
 80021c0:	183b      	adds	r3, r7, r0
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	0418      	lsls	r0, r3, #16
 80021c6:	23ff      	movs	r3, #255	; 0xff
 80021c8:	041b      	lsls	r3, r3, #16
 80021ca:	4003      	ands	r3, r0
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b005      	add	sp, #20
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	03ff63ff 	.word	0x03ff63ff

080021ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2241      	movs	r2, #65	; 0x41
 80021fa:	5c9b      	ldrb	r3, [r3, r2]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d138      	bne.n	8002274 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2240      	movs	r2, #64	; 0x40
 8002206:	5c9b      	ldrb	r3, [r3, r2]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800220c:	2302      	movs	r3, #2
 800220e:	e032      	b.n	8002276 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2240      	movs	r2, #64	; 0x40
 8002214:	2101      	movs	r1, #1
 8002216:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2241      	movs	r2, #65	; 0x41
 800221c:	2124      	movs	r1, #36	; 0x24
 800221e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2101      	movs	r1, #1
 800222c:	438a      	bics	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4911      	ldr	r1, [pc, #68]	; (8002280 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800223c:	400a      	ands	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2101      	movs	r1, #1
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2241      	movs	r2, #65	; 0x41
 8002264:	2120      	movs	r1, #32
 8002266:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2240      	movs	r2, #64	; 0x40
 800226c:	2100      	movs	r1, #0
 800226e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e000      	b.n	8002276 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002274:	2302      	movs	r3, #2
  }
}
 8002276:	0018      	movs	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	b002      	add	sp, #8
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	ffffefff 	.word	0xffffefff

08002284 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2241      	movs	r2, #65	; 0x41
 8002292:	5c9b      	ldrb	r3, [r3, r2]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b20      	cmp	r3, #32
 8002298:	d139      	bne.n	800230e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2240      	movs	r2, #64	; 0x40
 800229e:	5c9b      	ldrb	r3, [r3, r2]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e033      	b.n	8002310 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2240      	movs	r2, #64	; 0x40
 80022ac:	2101      	movs	r1, #1
 80022ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2241      	movs	r2, #65	; 0x41
 80022b4:	2124      	movs	r1, #36	; 0x24
 80022b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2101      	movs	r1, #1
 80022c4:	438a      	bics	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4a11      	ldr	r2, [pc, #68]	; (8002318 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2101      	movs	r1, #1
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2241      	movs	r2, #65	; 0x41
 80022fe:	2120      	movs	r1, #32
 8002300:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2240      	movs	r2, #64	; 0x40
 8002306:	2100      	movs	r1, #0
 8002308:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800230e:	2302      	movs	r3, #2
  }
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b004      	add	sp, #16
 8002316:	bd80      	pop	{r7, pc}
 8002318:	fffff0ff 	.word	0xfffff0ff

0800231c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	f000 fb76 	bl	8002a1c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2201      	movs	r2, #1
 8002336:	4013      	ands	r3, r2
 8002338:	d100      	bne.n	800233c <HAL_RCC_OscConfig+0x20>
 800233a:	e08e      	b.n	800245a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800233c:	4bc5      	ldr	r3, [pc, #788]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	220c      	movs	r2, #12
 8002342:	4013      	ands	r3, r2
 8002344:	2b04      	cmp	r3, #4
 8002346:	d00e      	beq.n	8002366 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002348:	4bc2      	ldr	r3, [pc, #776]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	220c      	movs	r2, #12
 800234e:	4013      	ands	r3, r2
 8002350:	2b08      	cmp	r3, #8
 8002352:	d117      	bne.n	8002384 <HAL_RCC_OscConfig+0x68>
 8002354:	4bbf      	ldr	r3, [pc, #764]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	23c0      	movs	r3, #192	; 0xc0
 800235a:	025b      	lsls	r3, r3, #9
 800235c:	401a      	ands	r2, r3
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	025b      	lsls	r3, r3, #9
 8002362:	429a      	cmp	r2, r3
 8002364:	d10e      	bne.n	8002384 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002366:	4bbb      	ldr	r3, [pc, #748]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	029b      	lsls	r3, r3, #10
 800236e:	4013      	ands	r3, r2
 8002370:	d100      	bne.n	8002374 <HAL_RCC_OscConfig+0x58>
 8002372:	e071      	b.n	8002458 <HAL_RCC_OscConfig+0x13c>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d000      	beq.n	800237e <HAL_RCC_OscConfig+0x62>
 800237c:	e06c      	b.n	8002458 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	f000 fb4c 	bl	8002a1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x80>
 800238c:	4bb1      	ldr	r3, [pc, #708]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4bb0      	ldr	r3, [pc, #704]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	0249      	lsls	r1, r1, #9
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e02f      	b.n	80023fc <HAL_RCC_OscConfig+0xe0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10c      	bne.n	80023be <HAL_RCC_OscConfig+0xa2>
 80023a4:	4bab      	ldr	r3, [pc, #684]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4baa      	ldr	r3, [pc, #680]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023aa:	49ab      	ldr	r1, [pc, #684]	; (8002658 <HAL_RCC_OscConfig+0x33c>)
 80023ac:	400a      	ands	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	4ba8      	ldr	r3, [pc, #672]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4ba7      	ldr	r3, [pc, #668]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023b6:	49a9      	ldr	r1, [pc, #676]	; (800265c <HAL_RCC_OscConfig+0x340>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e01e      	b.n	80023fc <HAL_RCC_OscConfig+0xe0>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d10e      	bne.n	80023e4 <HAL_RCC_OscConfig+0xc8>
 80023c6:	4ba3      	ldr	r3, [pc, #652]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4ba2      	ldr	r3, [pc, #648]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	02c9      	lsls	r1, r1, #11
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	4b9f      	ldr	r3, [pc, #636]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b9e      	ldr	r3, [pc, #632]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	0249      	lsls	r1, r1, #9
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0xe0>
 80023e4:	4b9b      	ldr	r3, [pc, #620]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b9a      	ldr	r3, [pc, #616]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023ea:	499b      	ldr	r1, [pc, #620]	; (8002658 <HAL_RCC_OscConfig+0x33c>)
 80023ec:	400a      	ands	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	4b98      	ldr	r3, [pc, #608]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b97      	ldr	r3, [pc, #604]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023f6:	4999      	ldr	r1, [pc, #612]	; (800265c <HAL_RCC_OscConfig+0x340>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d014      	beq.n	800242e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff f90a 	bl	800161c <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240e:	f7ff f905 	bl	800161c <HAL_GetTick>
 8002412:	0002      	movs	r2, r0
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b64      	cmp	r3, #100	; 0x64
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e2fd      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002420:	4b8c      	ldr	r3, [pc, #560]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	029b      	lsls	r3, r3, #10
 8002428:	4013      	ands	r3, r2
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0xf2>
 800242c:	e015      	b.n	800245a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7ff f8f5 	bl	800161c <HAL_GetTick>
 8002432:	0003      	movs	r3, r0
 8002434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff f8f0 	bl	800161c <HAL_GetTick>
 800243c:	0002      	movs	r2, r0
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e2e8      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	4b82      	ldr	r3, [pc, #520]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	029b      	lsls	r3, r3, #10
 8002452:	4013      	ands	r3, r2
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x11c>
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2202      	movs	r2, #2
 8002460:	4013      	ands	r3, r2
 8002462:	d100      	bne.n	8002466 <HAL_RCC_OscConfig+0x14a>
 8002464:	e06c      	b.n	8002540 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002466:	4b7b      	ldr	r3, [pc, #492]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	220c      	movs	r2, #12
 800246c:	4013      	ands	r3, r2
 800246e:	d00e      	beq.n	800248e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002470:	4b78      	ldr	r3, [pc, #480]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	220c      	movs	r2, #12
 8002476:	4013      	ands	r3, r2
 8002478:	2b08      	cmp	r3, #8
 800247a:	d11f      	bne.n	80024bc <HAL_RCC_OscConfig+0x1a0>
 800247c:	4b75      	ldr	r3, [pc, #468]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	23c0      	movs	r3, #192	; 0xc0
 8002482:	025b      	lsls	r3, r3, #9
 8002484:	401a      	ands	r2, r3
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	429a      	cmp	r2, r3
 800248c:	d116      	bne.n	80024bc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	4b71      	ldr	r3, [pc, #452]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2202      	movs	r2, #2
 8002494:	4013      	ands	r3, r2
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_OscConfig+0x188>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e2bb      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a4:	4b6b      	ldr	r3, [pc, #428]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	22f8      	movs	r2, #248	; 0xf8
 80024aa:	4393      	bics	r3, r2
 80024ac:	0019      	movs	r1, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00da      	lsls	r2, r3, #3
 80024b4:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	e041      	b.n	8002540 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d024      	beq.n	800250e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c4:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b62      	ldr	r3, [pc, #392]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7ff f8a4 	bl	800161c <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024da:	f7ff f89f 	bl	800161c <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e297      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	4b59      	ldr	r3, [pc, #356]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2202      	movs	r2, #2
 80024f2:	4013      	ands	r3, r2
 80024f4:	d0f1      	beq.n	80024da <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b57      	ldr	r3, [pc, #348]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	22f8      	movs	r2, #248	; 0xf8
 80024fc:	4393      	bics	r3, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	00da      	lsls	r2, r3, #3
 8002506:	4b53      	ldr	r3, [pc, #332]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e018      	b.n	8002540 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	4b51      	ldr	r3, [pc, #324]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b50      	ldr	r3, [pc, #320]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002514:	2101      	movs	r1, #1
 8002516:	438a      	bics	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7ff f87f 	bl	800161c <HAL_GetTick>
 800251e:	0003      	movs	r3, r0
 8002520:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002524:	f7ff f87a 	bl	800161c <HAL_GetTick>
 8002528:	0002      	movs	r2, r0
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e272      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	4b47      	ldr	r3, [pc, #284]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2202      	movs	r2, #2
 800253c:	4013      	ands	r3, r2
 800253e:	d1f1      	bne.n	8002524 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2208      	movs	r2, #8
 8002546:	4013      	ands	r3, r2
 8002548:	d036      	beq.n	80025b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d019      	beq.n	8002586 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b40      	ldr	r3, [pc, #256]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002556:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002558:	2101      	movs	r1, #1
 800255a:	430a      	orrs	r2, r1
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7ff f85d 	bl	800161c <HAL_GetTick>
 8002562:	0003      	movs	r3, r0
 8002564:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002568:	f7ff f858 	bl	800161c <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e250      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	4b36      	ldr	r3, [pc, #216]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d0f1      	beq.n	8002568 <HAL_RCC_OscConfig+0x24c>
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002586:	4b33      	ldr	r3, [pc, #204]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800258a:	4b32      	ldr	r3, [pc, #200]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800258c:	2101      	movs	r1, #1
 800258e:	438a      	bics	r2, r1
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7ff f843 	bl	800161c <HAL_GetTick>
 8002596:	0003      	movs	r3, r0
 8002598:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259c:	f7ff f83e 	bl	800161c <HAL_GetTick>
 80025a0:	0002      	movs	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e236      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ae:	4b29      	ldr	r3, [pc, #164]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d1f1      	bne.n	800259c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2204      	movs	r2, #4
 80025be:	4013      	ands	r3, r2
 80025c0:	d100      	bne.n	80025c4 <HAL_RCC_OscConfig+0x2a8>
 80025c2:	e0b5      	b.n	8002730 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c4:	231f      	movs	r3, #31
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	055b      	lsls	r3, r3, #21
 80025d4:	4013      	ands	r3, r2
 80025d6:	d111      	bne.n	80025fc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80025de:	2180      	movs	r1, #128	; 0x80
 80025e0:	0549      	lsls	r1, r1, #21
 80025e2:	430a      	orrs	r2, r1
 80025e4:	61da      	str	r2, [r3, #28]
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	055b      	lsls	r3, r3, #21
 80025ee:	4013      	ands	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025f4:	231f      	movs	r3, #31
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <HAL_RCC_OscConfig+0x344>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4013      	ands	r3, r2
 8002606:	d11a      	bne.n	800263e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_RCC_OscConfig+0x344>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_RCC_OscConfig+0x344>)
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	0049      	lsls	r1, r1, #1
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002616:	f7ff f801 	bl	800161c <HAL_GetTick>
 800261a:	0003      	movs	r3, r0
 800261c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002620:	f7fe fffc 	bl	800161c <HAL_GetTick>
 8002624:	0002      	movs	r2, r0
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1f4      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_OscConfig+0x344>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4013      	ands	r3, r2
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d10e      	bne.n	8002664 <HAL_RCC_OscConfig+0x348>
 8002646:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002648:	6a1a      	ldr	r2, [r3, #32]
 800264a:	4b02      	ldr	r3, [pc, #8]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800264c:	2101      	movs	r1, #1
 800264e:	430a      	orrs	r2, r1
 8002650:	621a      	str	r2, [r3, #32]
 8002652:	e035      	b.n	80026c0 <HAL_RCC_OscConfig+0x3a4>
 8002654:	40021000 	.word	0x40021000
 8002658:	fffeffff 	.word	0xfffeffff
 800265c:	fffbffff 	.word	0xfffbffff
 8002660:	40007000 	.word	0x40007000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10c      	bne.n	8002686 <HAL_RCC_OscConfig+0x36a>
 800266c:	4bca      	ldr	r3, [pc, #808]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800266e:	6a1a      	ldr	r2, [r3, #32]
 8002670:	4bc9      	ldr	r3, [pc, #804]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002672:	2101      	movs	r1, #1
 8002674:	438a      	bics	r2, r1
 8002676:	621a      	str	r2, [r3, #32]
 8002678:	4bc7      	ldr	r3, [pc, #796]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800267a:	6a1a      	ldr	r2, [r3, #32]
 800267c:	4bc6      	ldr	r3, [pc, #792]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800267e:	2104      	movs	r1, #4
 8002680:	438a      	bics	r2, r1
 8002682:	621a      	str	r2, [r3, #32]
 8002684:	e01c      	b.n	80026c0 <HAL_RCC_OscConfig+0x3a4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b05      	cmp	r3, #5
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x38c>
 800268e:	4bc2      	ldr	r3, [pc, #776]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002690:	6a1a      	ldr	r2, [r3, #32]
 8002692:	4bc1      	ldr	r3, [pc, #772]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002694:	2104      	movs	r1, #4
 8002696:	430a      	orrs	r2, r1
 8002698:	621a      	str	r2, [r3, #32]
 800269a:	4bbf      	ldr	r3, [pc, #764]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800269c:	6a1a      	ldr	r2, [r3, #32]
 800269e:	4bbe      	ldr	r3, [pc, #760]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80026a0:	2101      	movs	r1, #1
 80026a2:	430a      	orrs	r2, r1
 80026a4:	621a      	str	r2, [r3, #32]
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0x3a4>
 80026a8:	4bbb      	ldr	r3, [pc, #748]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	4bba      	ldr	r3, [pc, #744]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80026ae:	2101      	movs	r1, #1
 80026b0:	438a      	bics	r2, r1
 80026b2:	621a      	str	r2, [r3, #32]
 80026b4:	4bb8      	ldr	r3, [pc, #736]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80026b6:	6a1a      	ldr	r2, [r3, #32]
 80026b8:	4bb7      	ldr	r3, [pc, #732]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80026ba:	2104      	movs	r1, #4
 80026bc:	438a      	bics	r2, r1
 80026be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d014      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c8:	f7fe ffa8 	bl	800161c <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	e009      	b.n	80026e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7fe ffa3 	bl	800161c <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	4aaf      	ldr	r2, [pc, #700]	; (800299c <HAL_RCC_OscConfig+0x680>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e19a      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e6:	4bac      	ldr	r3, [pc, #688]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	2202      	movs	r2, #2
 80026ec:	4013      	ands	r3, r2
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x3b6>
 80026f0:	e013      	b.n	800271a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe ff93 	bl	800161c <HAL_GetTick>
 80026f6:	0003      	movs	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fa:	e009      	b.n	8002710 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe ff8e 	bl	800161c <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	4aa5      	ldr	r2, [pc, #660]	; (800299c <HAL_RCC_OscConfig+0x680>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e185      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002710:	4ba1      	ldr	r3, [pc, #644]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	2202      	movs	r2, #2
 8002716:	4013      	ands	r3, r2
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800271a:	231f      	movs	r3, #31
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002724:	4b9c      	ldr	r3, [pc, #624]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	4b9b      	ldr	r3, [pc, #620]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800272a:	499d      	ldr	r1, [pc, #628]	; (80029a0 <HAL_RCC_OscConfig+0x684>)
 800272c:	400a      	ands	r2, r1
 800272e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2210      	movs	r2, #16
 8002736:	4013      	ands	r3, r2
 8002738:	d063      	beq.n	8002802 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d12a      	bne.n	8002798 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002742:	4b95      	ldr	r3, [pc, #596]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002746:	4b94      	ldr	r3, [pc, #592]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002748:	2104      	movs	r1, #4
 800274a:	430a      	orrs	r2, r1
 800274c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800274e:	4b92      	ldr	r3, [pc, #584]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002752:	4b91      	ldr	r3, [pc, #580]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002754:	2101      	movs	r1, #1
 8002756:	430a      	orrs	r2, r1
 8002758:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7fe ff5f 	bl	800161c <HAL_GetTick>
 800275e:	0003      	movs	r3, r0
 8002760:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002764:	f7fe ff5a 	bl	800161c <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e152      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	2202      	movs	r2, #2
 800277c:	4013      	ands	r3, r2
 800277e:	d0f1      	beq.n	8002764 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002780:	4b85      	ldr	r3, [pc, #532]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002784:	22f8      	movs	r2, #248	; 0xf8
 8002786:	4393      	bics	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	00da      	lsls	r2, r3, #3
 8002790:	4b81      	ldr	r3, [pc, #516]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002792:	430a      	orrs	r2, r1
 8002794:	635a      	str	r2, [r3, #52]	; 0x34
 8002796:	e034      	b.n	8002802 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	3305      	adds	r3, #5
 800279e:	d111      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80027a0:	4b7d      	ldr	r3, [pc, #500]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a4:	4b7c      	ldr	r3, [pc, #496]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027a6:	2104      	movs	r1, #4
 80027a8:	438a      	bics	r2, r1
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027ac:	4b7a      	ldr	r3, [pc, #488]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b0:	22f8      	movs	r2, #248	; 0xf8
 80027b2:	4393      	bics	r3, r2
 80027b4:	0019      	movs	r1, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	00da      	lsls	r2, r3, #3
 80027bc:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027be:	430a      	orrs	r2, r1
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34
 80027c2:	e01e      	b.n	8002802 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027c4:	4b74      	ldr	r3, [pc, #464]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c8:	4b73      	ldr	r3, [pc, #460]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027ca:	2104      	movs	r1, #4
 80027cc:	430a      	orrs	r2, r1
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80027d0:	4b71      	ldr	r3, [pc, #452]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d4:	4b70      	ldr	r3, [pc, #448]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027d6:	2101      	movs	r1, #1
 80027d8:	438a      	bics	r2, r1
 80027da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7fe ff1e 	bl	800161c <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027e6:	f7fe ff19 	bl	800161c <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e111      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027f8:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	2202      	movs	r2, #2
 80027fe:	4013      	ands	r3, r2
 8002800:	d1f1      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2220      	movs	r2, #32
 8002808:	4013      	ands	r3, r2
 800280a:	d05c      	beq.n	80028c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800280c:	4b62      	ldr	r3, [pc, #392]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	220c      	movs	r2, #12
 8002812:	4013      	ands	r3, r2
 8002814:	2b0c      	cmp	r3, #12
 8002816:	d00e      	beq.n	8002836 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002818:	4b5f      	ldr	r3, [pc, #380]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	220c      	movs	r2, #12
 800281e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002820:	2b08      	cmp	r3, #8
 8002822:	d114      	bne.n	800284e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002824:	4b5c      	ldr	r3, [pc, #368]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	23c0      	movs	r3, #192	; 0xc0
 800282a:	025b      	lsls	r3, r3, #9
 800282c:	401a      	ands	r2, r3
 800282e:	23c0      	movs	r3, #192	; 0xc0
 8002830:	025b      	lsls	r3, r3, #9
 8002832:	429a      	cmp	r2, r3
 8002834:	d10b      	bne.n	800284e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002836:	4b58      	ldr	r3, [pc, #352]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	025b      	lsls	r3, r3, #9
 800283e:	4013      	ands	r3, r2
 8002840:	d040      	beq.n	80028c4 <HAL_RCC_OscConfig+0x5a8>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d03c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0e6      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01b      	beq.n	800288e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002856:	4b50      	ldr	r3, [pc, #320]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285a:	4b4f      	ldr	r3, [pc, #316]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	0249      	lsls	r1, r1, #9
 8002860:	430a      	orrs	r2, r1
 8002862:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe feda 	bl	800161c <HAL_GetTick>
 8002868:	0003      	movs	r3, r0
 800286a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800286e:	f7fe fed5 	bl	800161c <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0cd      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002880:	4b45      	ldr	r3, [pc, #276]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	025b      	lsls	r3, r3, #9
 8002888:	4013      	ands	r3, r2
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x552>
 800288c:	e01b      	b.n	80028c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800288e:	4b42      	ldr	r3, [pc, #264]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002892:	4b41      	ldr	r3, [pc, #260]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002894:	4943      	ldr	r1, [pc, #268]	; (80029a4 <HAL_RCC_OscConfig+0x688>)
 8002896:	400a      	ands	r2, r1
 8002898:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fe febf 	bl	800161c <HAL_GetTick>
 800289e:	0003      	movs	r3, r0
 80028a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028a4:	f7fe feba 	bl	800161c <HAL_GetTick>
 80028a8:	0002      	movs	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e0b2      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028b6:	4b38      	ldr	r3, [pc, #224]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80028b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	025b      	lsls	r3, r3, #9
 80028be:	4013      	ands	r3, r2
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x588>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80028c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d100      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5b4>
 80028ce:	e0a4      	b.n	8002a1a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d0:	4b31      	ldr	r3, [pc, #196]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	220c      	movs	r2, #12
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d100      	bne.n	80028de <HAL_RCC_OscConfig+0x5c2>
 80028dc:	e078      	b.n	80029d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d14c      	bne.n	8002980 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80028ec:	492e      	ldr	r1, [pc, #184]	; (80029a8 <HAL_RCC_OscConfig+0x68c>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe fe93 	bl	800161c <HAL_GetTick>
 80028f6:	0003      	movs	r3, r0
 80028f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe fe8e 	bl	800161c <HAL_GetTick>
 8002900:	0002      	movs	r2, r0
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e086      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290e:	4b22      	ldr	r3, [pc, #136]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	049b      	lsls	r3, r3, #18
 8002916:	4013      	ands	r3, r2
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291a:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	220f      	movs	r2, #15
 8002920:	4393      	bics	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800292a:	430a      	orrs	r2, r1
 800292c:	62da      	str	r2, [r3, #44]	; 0x2c
 800292e:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_RCC_OscConfig+0x690>)
 8002934:	4013      	ands	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	431a      	orrs	r2, r3
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002944:	430a      	orrs	r2, r1
 8002946:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002948:	4b13      	ldr	r3, [pc, #76]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800294e:	2180      	movs	r1, #128	; 0x80
 8002950:	0449      	lsls	r1, r1, #17
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7fe fe61 	bl	800161c <HAL_GetTick>
 800295a:	0003      	movs	r3, r0
 800295c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fe5c 	bl	800161c <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e054      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	049b      	lsls	r3, r3, #18
 800297a:	4013      	ands	r3, r2
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x644>
 800297e:	e04c      	b.n	8002a1a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <HAL_RCC_OscConfig+0x68c>)
 8002988:	400a      	ands	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fe46 	bl	800161c <HAL_GetTick>
 8002990:	0003      	movs	r3, r0
 8002992:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x6a6>
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	40021000 	.word	0x40021000
 800299c:	00001388 	.word	0x00001388
 80029a0:	efffffff 	.word	0xefffffff
 80029a4:	fffeffff 	.word	0xfffeffff
 80029a8:	feffffff 	.word	0xfeffffff
 80029ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fe34 	bl	800161c <HAL_GetTick>
 80029b4:	0002      	movs	r2, r0
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e02c      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_RCC_OscConfig+0x708>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	049b      	lsls	r3, r3, #18
 80029ca:	4013      	ands	r3, r2
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x694>
 80029ce:	e024      	b.n	8002a1a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e01f      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_RCC_OscConfig+0x708>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_RCC_OscConfig+0x708>)
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	23c0      	movs	r3, #192	; 0xc0
 80029ec:	025b      	lsls	r3, r3, #9
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d10e      	bne.n	8002a16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	220f      	movs	r2, #15
 80029fc:	401a      	ands	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	23f0      	movs	r3, #240	; 0xf0
 8002a0a:	039b      	lsls	r3, r3, #14
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b008      	add	sp, #32
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000

08002a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0bf      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d911      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b5e      	ldr	r3, [pc, #376]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4393      	bics	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	4b5b      	ldr	r3, [pc, #364]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5c:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2201      	movs	r2, #1
 8002a62:	4013      	ands	r3, r2
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0a6      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2202      	movs	r2, #2
 8002a74:	4013      	ands	r3, r2
 8002a76:	d015      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d006      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a82:	4b51      	ldr	r3, [pc, #324]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4b50      	ldr	r3, [pc, #320]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a88:	21e0      	movs	r1, #224	; 0xe0
 8002a8a:	00c9      	lsls	r1, r1, #3
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	22f0      	movs	r2, #240	; 0xf0
 8002a96:	4393      	bics	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d04c      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b44      	ldr	r3, [pc, #272]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	029b      	lsls	r3, r3, #10
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d120      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07a      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b3e      	ldr	r3, [pc, #248]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	049b      	lsls	r3, r3, #18
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d114      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06e      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	025b      	lsls	r3, r3, #9
 8002aee:	4013      	ands	r3, r2
 8002af0:	d108      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e062      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2202      	movs	r2, #2
 8002afc:	4013      	ands	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e05b      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b04:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	4393      	bics	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b18:	f7fe fd80 	bl	800161c <HAL_GetTick>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b20:	e009      	b.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b22:	f7fe fd7b 	bl	800161c <HAL_GetTick>
 8002b26:	0002      	movs	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <HAL_RCC_ClockConfig+0x1a4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e042      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d1ec      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d211      	bcs.n	8002b7a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b68:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e020      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	4013      	ands	r3, r2
 8002b82:	d009      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <HAL_RCC_ClockConfig+0x1a8>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b98:	f000 f820 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b9c:	0001      	movs	r1, r0
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x1ac>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	000a      	movs	r2, r1
 8002bae:	40da      	lsrs	r2, r3
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1b0>)
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fe fceb 	bl	8001590 <HAL_InitTick>
  
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b004      	add	sp, #16
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40022000 	.word	0x40022000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	00001388 	.word	0x00001388
 8002bd0:	fffff8ff 	.word	0xfffff8ff
 8002bd4:	08003814 	.word	0x08003814
 8002bd8:	20000000 	.word	0x20000000

08002bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b08f      	sub	sp, #60	; 0x3c
 8002be0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002be2:	2314      	movs	r3, #20
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	4a37      	ldr	r2, [pc, #220]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002be8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bea:	c313      	stmia	r3!, {r0, r1, r4}
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	4a35      	ldr	r2, [pc, #212]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xec>)
 8002bf4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bf6:	c313      	stmia	r3!, {r0, r1, r4}
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c00:	2300      	movs	r3, #0
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c04:	2300      	movs	r3, #0
 8002c06:	637b      	str	r3, [r7, #52]	; 0x34
 8002c08:	2300      	movs	r3, #0
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002c10:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xf0>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	220c      	movs	r2, #12
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d006      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x52>
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d043      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0xd0>
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d144      	bne.n	8002cb2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c28:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c2c:	e044      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	0c9b      	lsrs	r3, r3, #18
 8002c32:	220f      	movs	r2, #15
 8002c34:	4013      	ands	r3, r2
 8002c36:	2214      	movs	r2, #20
 8002c38:	18ba      	adds	r2, r7, r2
 8002c3a:	5cd3      	ldrb	r3, [r2, r3]
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c3e:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xf0>)
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	220f      	movs	r2, #15
 8002c44:	4013      	ands	r3, r2
 8002c46:	1d3a      	adds	r2, r7, #4
 8002c48:	5cd3      	ldrb	r3, [r2, r3]
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4e:	23c0      	movs	r3, #192	; 0xc0
 8002c50:	025b      	lsls	r3, r3, #9
 8002c52:	401a      	ands	r2, r3
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	025b      	lsls	r3, r3, #9
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d109      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c5e:	481c      	ldr	r0, [pc, #112]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c60:	f7fd fa52 	bl	8000108 <__udivsi3>
 8002c64:	0003      	movs	r3, r0
 8002c66:	001a      	movs	r2, r3
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	4353      	muls	r3, r2
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c6e:	e01a      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c72:	23c0      	movs	r3, #192	; 0xc0
 8002c74:	025b      	lsls	r3, r3, #9
 8002c76:	401a      	ands	r2, r3
 8002c78:	23c0      	movs	r3, #192	; 0xc0
 8002c7a:	025b      	lsls	r3, r3, #9
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d109      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c82:	4814      	ldr	r0, [pc, #80]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c84:	f7fd fa40 	bl	8000108 <__udivsi3>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	4353      	muls	r3, r2
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c96:	480e      	ldr	r0, [pc, #56]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c98:	f7fd fa36 	bl	8000108 <__udivsi3>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	001a      	movs	r2, r3
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	4353      	muls	r3, r2
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002caa:	e005      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cb0:	e002      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cb6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002cba:	0018      	movs	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b00f      	add	sp, #60	; 0x3c
 8002cc0:	bd90      	pop	{r4, r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	080037b4 	.word	0x080037b4
 8002cc8:	080037c4 	.word	0x080037c4
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	007a1200 	.word	0x007a1200
 8002cd4:	02dc6c00 	.word	0x02dc6c00

08002cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	025b      	lsls	r3, r3, #9
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d100      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002cf4:	e08f      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002cf6:	2317      	movs	r3, #23
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfe:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	055b      	lsls	r3, r3, #21
 8002d06:	4013      	ands	r3, r2
 8002d08:	d111      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	4b64      	ldr	r3, [pc, #400]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d10:	2180      	movs	r1, #128	; 0x80
 8002d12:	0549      	lsls	r1, r1, #21
 8002d14:	430a      	orrs	r2, r1
 8002d16:	61da      	str	r2, [r3, #28]
 8002d18:	4b60      	ldr	r3, [pc, #384]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	055b      	lsls	r3, r3, #21
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d26:	2317      	movs	r3, #23
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	4b5c      	ldr	r3, [pc, #368]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4013      	ands	r3, r2
 8002d38:	d11a      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3a:	4b59      	ldr	r3, [pc, #356]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	0049      	lsls	r1, r1, #1
 8002d44:	430a      	orrs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d48:	f7fe fc68 	bl	800161c <HAL_GetTick>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	e008      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d52:	f7fe fc63 	bl	800161c <HAL_GetTick>
 8002d56:	0002      	movs	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b64      	cmp	r3, #100	; 0x64
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e097      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	4b4e      	ldr	r3, [pc, #312]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d70:	4b4a      	ldr	r3, [pc, #296]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	23c0      	movs	r3, #192	; 0xc0
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d034      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	23c0      	movs	r3, #192	; 0xc0
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d02c      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d92:	4b42      	ldr	r3, [pc, #264]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a43      	ldr	r2, [pc, #268]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d9c:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d9e:	6a1a      	ldr	r2, [r3, #32]
 8002da0:	4b3e      	ldr	r3, [pc, #248]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002da2:	2180      	movs	r1, #128	; 0x80
 8002da4:	0249      	lsls	r1, r1, #9
 8002da6:	430a      	orrs	r2, r1
 8002da8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002daa:	4b3c      	ldr	r3, [pc, #240]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	4b3b      	ldr	r3, [pc, #236]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002db0:	493d      	ldr	r1, [pc, #244]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	400a      	ands	r2, r1
 8002db4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d013      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fc2a 	bl	800161c <HAL_GetTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	e009      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe fc25 	bl	800161c <HAL_GetTick>
 8002dd2:	0002      	movs	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	4a34      	ldr	r2, [pc, #208]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e058      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de2:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	2202      	movs	r2, #2
 8002de8:	4013      	ands	r3, r2
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a2c      	ldr	r2, [pc, #176]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e00:	2317      	movs	r3, #23
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d105      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e0c:	69da      	ldr	r2, [r3, #28]
 8002e0e:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e10:	4927      	ldr	r1, [pc, #156]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e12:	400a      	ands	r2, r1
 8002e14:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d009      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e20:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	2203      	movs	r2, #3
 8002e26:	4393      	bics	r3, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e30:	430a      	orrs	r2, r1
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	2210      	movs	r2, #16
 8002e44:	4393      	bics	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	029b      	lsls	r3, r3, #10
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	4393      	bics	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	2240      	movs	r2, #64	; 0x40
 8002e84:	4393      	bics	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b006      	add	sp, #24
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	fffffcff 	.word	0xfffffcff
 8002ea8:	fffeffff 	.word	0xfffeffff
 8002eac:	00001388 	.word	0x00001388
 8002eb0:	efffffff 	.word	0xefffffff

08002eb4 <__errno>:
 8002eb4:	4b01      	ldr	r3, [pc, #4]	; (8002ebc <__errno+0x8>)
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	4770      	bx	lr
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	2000002c 	.word	0x2000002c

08002ec0 <__libc_init_array>:
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	2600      	movs	r6, #0
 8002ec4:	4d0c      	ldr	r5, [pc, #48]	; (8002ef8 <__libc_init_array+0x38>)
 8002ec6:	4c0d      	ldr	r4, [pc, #52]	; (8002efc <__libc_init_array+0x3c>)
 8002ec8:	1b64      	subs	r4, r4, r5
 8002eca:	10a4      	asrs	r4, r4, #2
 8002ecc:	42a6      	cmp	r6, r4
 8002ece:	d109      	bne.n	8002ee4 <__libc_init_array+0x24>
 8002ed0:	2600      	movs	r6, #0
 8002ed2:	f000 fc3b 	bl	800374c <_init>
 8002ed6:	4d0a      	ldr	r5, [pc, #40]	; (8002f00 <__libc_init_array+0x40>)
 8002ed8:	4c0a      	ldr	r4, [pc, #40]	; (8002f04 <__libc_init_array+0x44>)
 8002eda:	1b64      	subs	r4, r4, r5
 8002edc:	10a4      	asrs	r4, r4, #2
 8002ede:	42a6      	cmp	r6, r4
 8002ee0:	d105      	bne.n	8002eee <__libc_init_array+0x2e>
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
 8002ee4:	00b3      	lsls	r3, r6, #2
 8002ee6:	58eb      	ldr	r3, [r5, r3]
 8002ee8:	4798      	blx	r3
 8002eea:	3601      	adds	r6, #1
 8002eec:	e7ee      	b.n	8002ecc <__libc_init_array+0xc>
 8002eee:	00b3      	lsls	r3, r6, #2
 8002ef0:	58eb      	ldr	r3, [r5, r3]
 8002ef2:	4798      	blx	r3
 8002ef4:	3601      	adds	r6, #1
 8002ef6:	e7f2      	b.n	8002ede <__libc_init_array+0x1e>
 8002ef8:	0800665c 	.word	0x0800665c
 8002efc:	0800665c 	.word	0x0800665c
 8002f00:	0800665c 	.word	0x0800665c
 8002f04:	08006660 	.word	0x08006660

08002f08 <memmove>:
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	4288      	cmp	r0, r1
 8002f0c:	d902      	bls.n	8002f14 <memmove+0xc>
 8002f0e:	188b      	adds	r3, r1, r2
 8002f10:	4298      	cmp	r0, r3
 8002f12:	d303      	bcc.n	8002f1c <memmove+0x14>
 8002f14:	2300      	movs	r3, #0
 8002f16:	e007      	b.n	8002f28 <memmove+0x20>
 8002f18:	5c8b      	ldrb	r3, [r1, r2]
 8002f1a:	5483      	strb	r3, [r0, r2]
 8002f1c:	3a01      	subs	r2, #1
 8002f1e:	d2fb      	bcs.n	8002f18 <memmove+0x10>
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	5ccc      	ldrb	r4, [r1, r3]
 8002f24:	54c4      	strb	r4, [r0, r3]
 8002f26:	3301      	adds	r3, #1
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d1fa      	bne.n	8002f22 <memmove+0x1a>
 8002f2c:	e7f8      	b.n	8002f20 <memmove+0x18>

08002f2e <memset>:
 8002f2e:	0003      	movs	r3, r0
 8002f30:	1812      	adds	r2, r2, r0
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d100      	bne.n	8002f38 <memset+0xa>
 8002f36:	4770      	bx	lr
 8002f38:	7019      	strb	r1, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	e7f9      	b.n	8002f32 <memset+0x4>
	...

08002f40 <sniprintf>:
 8002f40:	b40c      	push	{r2, r3}
 8002f42:	b530      	push	{r4, r5, lr}
 8002f44:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <sniprintf+0x60>)
 8002f46:	b09d      	sub	sp, #116	; 0x74
 8002f48:	1e0c      	subs	r4, r1, #0
 8002f4a:	681d      	ldr	r5, [r3, #0]
 8002f4c:	da08      	bge.n	8002f60 <sniprintf+0x20>
 8002f4e:	238b      	movs	r3, #139	; 0x8b
 8002f50:	2001      	movs	r0, #1
 8002f52:	602b      	str	r3, [r5, #0]
 8002f54:	4240      	negs	r0, r0
 8002f56:	b01d      	add	sp, #116	; 0x74
 8002f58:	bc30      	pop	{r4, r5}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	b002      	add	sp, #8
 8002f5e:	4718      	bx	r3
 8002f60:	2382      	movs	r3, #130	; 0x82
 8002f62:	a902      	add	r1, sp, #8
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	818b      	strh	r3, [r1, #12]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	9002      	str	r0, [sp, #8]
 8002f6c:	6108      	str	r0, [r1, #16]
 8002f6e:	429c      	cmp	r4, r3
 8002f70:	d000      	beq.n	8002f74 <sniprintf+0x34>
 8002f72:	1e63      	subs	r3, r4, #1
 8002f74:	608b      	str	r3, [r1, #8]
 8002f76:	614b      	str	r3, [r1, #20]
 8002f78:	2301      	movs	r3, #1
 8002f7a:	425b      	negs	r3, r3
 8002f7c:	81cb      	strh	r3, [r1, #14]
 8002f7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002f80:	ab21      	add	r3, sp, #132	; 0x84
 8002f82:	0028      	movs	r0, r5
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	f000 f86f 	bl	8003068 <_svfiprintf_r>
 8002f8a:	1c43      	adds	r3, r0, #1
 8002f8c:	da01      	bge.n	8002f92 <sniprintf+0x52>
 8002f8e:	238b      	movs	r3, #139	; 0x8b
 8002f90:	602b      	str	r3, [r5, #0]
 8002f92:	2c00      	cmp	r4, #0
 8002f94:	d0df      	beq.n	8002f56 <sniprintf+0x16>
 8002f96:	2300      	movs	r3, #0
 8002f98:	9a02      	ldr	r2, [sp, #8]
 8002f9a:	7013      	strb	r3, [r2, #0]
 8002f9c:	e7db      	b.n	8002f56 <sniprintf+0x16>
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	2000002c 	.word	0x2000002c

08002fa4 <__ssputs_r>:
 8002fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa6:	688e      	ldr	r6, [r1, #8]
 8002fa8:	b085      	sub	sp, #20
 8002faa:	0007      	movs	r7, r0
 8002fac:	000c      	movs	r4, r1
 8002fae:	9203      	str	r2, [sp, #12]
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	429e      	cmp	r6, r3
 8002fb4:	d83c      	bhi.n	8003030 <__ssputs_r+0x8c>
 8002fb6:	2390      	movs	r3, #144	; 0x90
 8002fb8:	898a      	ldrh	r2, [r1, #12]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	421a      	tst	r2, r3
 8002fbe:	d034      	beq.n	800302a <__ssputs_r+0x86>
 8002fc0:	2503      	movs	r5, #3
 8002fc2:	6909      	ldr	r1, [r1, #16]
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	1a5b      	subs	r3, r3, r1
 8002fc8:	9302      	str	r3, [sp, #8]
 8002fca:	6963      	ldr	r3, [r4, #20]
 8002fcc:	9802      	ldr	r0, [sp, #8]
 8002fce:	435d      	muls	r5, r3
 8002fd0:	0feb      	lsrs	r3, r5, #31
 8002fd2:	195d      	adds	r5, r3, r5
 8002fd4:	9b01      	ldr	r3, [sp, #4]
 8002fd6:	106d      	asrs	r5, r5, #1
 8002fd8:	3301      	adds	r3, #1
 8002fda:	181b      	adds	r3, r3, r0
 8002fdc:	42ab      	cmp	r3, r5
 8002fde:	d900      	bls.n	8002fe2 <__ssputs_r+0x3e>
 8002fe0:	001d      	movs	r5, r3
 8002fe2:	0553      	lsls	r3, r2, #21
 8002fe4:	d532      	bpl.n	800304c <__ssputs_r+0xa8>
 8002fe6:	0029      	movs	r1, r5
 8002fe8:	0038      	movs	r0, r7
 8002fea:	f000 fb0f 	bl	800360c <_malloc_r>
 8002fee:	1e06      	subs	r6, r0, #0
 8002ff0:	d109      	bne.n	8003006 <__ssputs_r+0x62>
 8002ff2:	230c      	movs	r3, #12
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	2340      	movs	r3, #64	; 0x40
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	89a2      	ldrh	r2, [r4, #12]
 8002ffc:	4240      	negs	r0, r0
 8002ffe:	4313      	orrs	r3, r2
 8003000:	81a3      	strh	r3, [r4, #12]
 8003002:	b005      	add	sp, #20
 8003004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003006:	9a02      	ldr	r2, [sp, #8]
 8003008:	6921      	ldr	r1, [r4, #16]
 800300a:	f000 faac 	bl	8003566 <memcpy>
 800300e:	89a3      	ldrh	r3, [r4, #12]
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <__ssputs_r+0xc0>)
 8003012:	401a      	ands	r2, r3
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	4313      	orrs	r3, r2
 8003018:	81a3      	strh	r3, [r4, #12]
 800301a:	9b02      	ldr	r3, [sp, #8]
 800301c:	6126      	str	r6, [r4, #16]
 800301e:	18f6      	adds	r6, r6, r3
 8003020:	6026      	str	r6, [r4, #0]
 8003022:	6165      	str	r5, [r4, #20]
 8003024:	9e01      	ldr	r6, [sp, #4]
 8003026:	1aed      	subs	r5, r5, r3
 8003028:	60a5      	str	r5, [r4, #8]
 800302a:	9b01      	ldr	r3, [sp, #4]
 800302c:	429e      	cmp	r6, r3
 800302e:	d900      	bls.n	8003032 <__ssputs_r+0x8e>
 8003030:	9e01      	ldr	r6, [sp, #4]
 8003032:	0032      	movs	r2, r6
 8003034:	9903      	ldr	r1, [sp, #12]
 8003036:	6820      	ldr	r0, [r4, #0]
 8003038:	f7ff ff66 	bl	8002f08 <memmove>
 800303c:	68a3      	ldr	r3, [r4, #8]
 800303e:	2000      	movs	r0, #0
 8003040:	1b9b      	subs	r3, r3, r6
 8003042:	60a3      	str	r3, [r4, #8]
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	199e      	adds	r6, r3, r6
 8003048:	6026      	str	r6, [r4, #0]
 800304a:	e7da      	b.n	8003002 <__ssputs_r+0x5e>
 800304c:	002a      	movs	r2, r5
 800304e:	0038      	movs	r0, r7
 8003050:	f000 fb3a 	bl	80036c8 <_realloc_r>
 8003054:	1e06      	subs	r6, r0, #0
 8003056:	d1e0      	bne.n	800301a <__ssputs_r+0x76>
 8003058:	6921      	ldr	r1, [r4, #16]
 800305a:	0038      	movs	r0, r7
 800305c:	f000 fa8c 	bl	8003578 <_free_r>
 8003060:	e7c7      	b.n	8002ff2 <__ssputs_r+0x4e>
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	fffffb7f 	.word	0xfffffb7f

08003068 <_svfiprintf_r>:
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	b0a1      	sub	sp, #132	; 0x84
 800306c:	9003      	str	r0, [sp, #12]
 800306e:	001d      	movs	r5, r3
 8003070:	898b      	ldrh	r3, [r1, #12]
 8003072:	000f      	movs	r7, r1
 8003074:	0016      	movs	r6, r2
 8003076:	061b      	lsls	r3, r3, #24
 8003078:	d511      	bpl.n	800309e <_svfiprintf_r+0x36>
 800307a:	690b      	ldr	r3, [r1, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10e      	bne.n	800309e <_svfiprintf_r+0x36>
 8003080:	2140      	movs	r1, #64	; 0x40
 8003082:	f000 fac3 	bl	800360c <_malloc_r>
 8003086:	6038      	str	r0, [r7, #0]
 8003088:	6138      	str	r0, [r7, #16]
 800308a:	2800      	cmp	r0, #0
 800308c:	d105      	bne.n	800309a <_svfiprintf_r+0x32>
 800308e:	230c      	movs	r3, #12
 8003090:	9a03      	ldr	r2, [sp, #12]
 8003092:	3801      	subs	r0, #1
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	b021      	add	sp, #132	; 0x84
 8003098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800309a:	2340      	movs	r3, #64	; 0x40
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	2300      	movs	r3, #0
 80030a0:	ac08      	add	r4, sp, #32
 80030a2:	6163      	str	r3, [r4, #20]
 80030a4:	3320      	adds	r3, #32
 80030a6:	7663      	strb	r3, [r4, #25]
 80030a8:	3310      	adds	r3, #16
 80030aa:	76a3      	strb	r3, [r4, #26]
 80030ac:	9507      	str	r5, [sp, #28]
 80030ae:	0035      	movs	r5, r6
 80030b0:	782b      	ldrb	r3, [r5, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <_svfiprintf_r+0x52>
 80030b6:	2b25      	cmp	r3, #37	; 0x25
 80030b8:	d146      	bne.n	8003148 <_svfiprintf_r+0xe0>
 80030ba:	1bab      	subs	r3, r5, r6
 80030bc:	9305      	str	r3, [sp, #20]
 80030be:	d00c      	beq.n	80030da <_svfiprintf_r+0x72>
 80030c0:	0032      	movs	r2, r6
 80030c2:	0039      	movs	r1, r7
 80030c4:	9803      	ldr	r0, [sp, #12]
 80030c6:	f7ff ff6d 	bl	8002fa4 <__ssputs_r>
 80030ca:	1c43      	adds	r3, r0, #1
 80030cc:	d100      	bne.n	80030d0 <_svfiprintf_r+0x68>
 80030ce:	e0ae      	b.n	800322e <_svfiprintf_r+0x1c6>
 80030d0:	6962      	ldr	r2, [r4, #20]
 80030d2:	9b05      	ldr	r3, [sp, #20]
 80030d4:	4694      	mov	ip, r2
 80030d6:	4463      	add	r3, ip
 80030d8:	6163      	str	r3, [r4, #20]
 80030da:	782b      	ldrb	r3, [r5, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d100      	bne.n	80030e2 <_svfiprintf_r+0x7a>
 80030e0:	e0a5      	b.n	800322e <_svfiprintf_r+0x1c6>
 80030e2:	2201      	movs	r2, #1
 80030e4:	2300      	movs	r3, #0
 80030e6:	4252      	negs	r2, r2
 80030e8:	6062      	str	r2, [r4, #4]
 80030ea:	a904      	add	r1, sp, #16
 80030ec:	3254      	adds	r2, #84	; 0x54
 80030ee:	1852      	adds	r2, r2, r1
 80030f0:	1c6e      	adds	r6, r5, #1
 80030f2:	6023      	str	r3, [r4, #0]
 80030f4:	60e3      	str	r3, [r4, #12]
 80030f6:	60a3      	str	r3, [r4, #8]
 80030f8:	7013      	strb	r3, [r2, #0]
 80030fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80030fc:	7831      	ldrb	r1, [r6, #0]
 80030fe:	2205      	movs	r2, #5
 8003100:	4853      	ldr	r0, [pc, #332]	; (8003250 <_svfiprintf_r+0x1e8>)
 8003102:	f000 fa25 	bl	8003550 <memchr>
 8003106:	1c75      	adds	r5, r6, #1
 8003108:	2800      	cmp	r0, #0
 800310a:	d11f      	bne.n	800314c <_svfiprintf_r+0xe4>
 800310c:	6822      	ldr	r2, [r4, #0]
 800310e:	06d3      	lsls	r3, r2, #27
 8003110:	d504      	bpl.n	800311c <_svfiprintf_r+0xb4>
 8003112:	2353      	movs	r3, #83	; 0x53
 8003114:	a904      	add	r1, sp, #16
 8003116:	185b      	adds	r3, r3, r1
 8003118:	2120      	movs	r1, #32
 800311a:	7019      	strb	r1, [r3, #0]
 800311c:	0713      	lsls	r3, r2, #28
 800311e:	d504      	bpl.n	800312a <_svfiprintf_r+0xc2>
 8003120:	2353      	movs	r3, #83	; 0x53
 8003122:	a904      	add	r1, sp, #16
 8003124:	185b      	adds	r3, r3, r1
 8003126:	212b      	movs	r1, #43	; 0x2b
 8003128:	7019      	strb	r1, [r3, #0]
 800312a:	7833      	ldrb	r3, [r6, #0]
 800312c:	2b2a      	cmp	r3, #42	; 0x2a
 800312e:	d016      	beq.n	800315e <_svfiprintf_r+0xf6>
 8003130:	0035      	movs	r5, r6
 8003132:	2100      	movs	r1, #0
 8003134:	200a      	movs	r0, #10
 8003136:	68e3      	ldr	r3, [r4, #12]
 8003138:	782a      	ldrb	r2, [r5, #0]
 800313a:	1c6e      	adds	r6, r5, #1
 800313c:	3a30      	subs	r2, #48	; 0x30
 800313e:	2a09      	cmp	r2, #9
 8003140:	d94e      	bls.n	80031e0 <_svfiprintf_r+0x178>
 8003142:	2900      	cmp	r1, #0
 8003144:	d018      	beq.n	8003178 <_svfiprintf_r+0x110>
 8003146:	e010      	b.n	800316a <_svfiprintf_r+0x102>
 8003148:	3501      	adds	r5, #1
 800314a:	e7b1      	b.n	80030b0 <_svfiprintf_r+0x48>
 800314c:	4b40      	ldr	r3, [pc, #256]	; (8003250 <_svfiprintf_r+0x1e8>)
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	1ac0      	subs	r0, r0, r3
 8003152:	2301      	movs	r3, #1
 8003154:	4083      	lsls	r3, r0
 8003156:	4313      	orrs	r3, r2
 8003158:	6023      	str	r3, [r4, #0]
 800315a:	002e      	movs	r6, r5
 800315c:	e7ce      	b.n	80030fc <_svfiprintf_r+0x94>
 800315e:	9b07      	ldr	r3, [sp, #28]
 8003160:	1d19      	adds	r1, r3, #4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	9107      	str	r1, [sp, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	db01      	blt.n	800316e <_svfiprintf_r+0x106>
 800316a:	930b      	str	r3, [sp, #44]	; 0x2c
 800316c:	e004      	b.n	8003178 <_svfiprintf_r+0x110>
 800316e:	425b      	negs	r3, r3
 8003170:	60e3      	str	r3, [r4, #12]
 8003172:	2302      	movs	r3, #2
 8003174:	4313      	orrs	r3, r2
 8003176:	6023      	str	r3, [r4, #0]
 8003178:	782b      	ldrb	r3, [r5, #0]
 800317a:	2b2e      	cmp	r3, #46	; 0x2e
 800317c:	d10a      	bne.n	8003194 <_svfiprintf_r+0x12c>
 800317e:	786b      	ldrb	r3, [r5, #1]
 8003180:	2b2a      	cmp	r3, #42	; 0x2a
 8003182:	d135      	bne.n	80031f0 <_svfiprintf_r+0x188>
 8003184:	9b07      	ldr	r3, [sp, #28]
 8003186:	3502      	adds	r5, #2
 8003188:	1d1a      	adds	r2, r3, #4
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	9207      	str	r2, [sp, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	db2b      	blt.n	80031ea <_svfiprintf_r+0x182>
 8003192:	9309      	str	r3, [sp, #36]	; 0x24
 8003194:	4e2f      	ldr	r6, [pc, #188]	; (8003254 <_svfiprintf_r+0x1ec>)
 8003196:	7829      	ldrb	r1, [r5, #0]
 8003198:	2203      	movs	r2, #3
 800319a:	0030      	movs	r0, r6
 800319c:	f000 f9d8 	bl	8003550 <memchr>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d006      	beq.n	80031b2 <_svfiprintf_r+0x14a>
 80031a4:	2340      	movs	r3, #64	; 0x40
 80031a6:	1b80      	subs	r0, r0, r6
 80031a8:	4083      	lsls	r3, r0
 80031aa:	6822      	ldr	r2, [r4, #0]
 80031ac:	3501      	adds	r5, #1
 80031ae:	4313      	orrs	r3, r2
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	7829      	ldrb	r1, [r5, #0]
 80031b4:	2206      	movs	r2, #6
 80031b6:	4828      	ldr	r0, [pc, #160]	; (8003258 <_svfiprintf_r+0x1f0>)
 80031b8:	1c6e      	adds	r6, r5, #1
 80031ba:	7621      	strb	r1, [r4, #24]
 80031bc:	f000 f9c8 	bl	8003550 <memchr>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d03c      	beq.n	800323e <_svfiprintf_r+0x1d6>
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <_svfiprintf_r+0x1f4>)
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d125      	bne.n	8003216 <_svfiprintf_r+0x1ae>
 80031ca:	2207      	movs	r2, #7
 80031cc:	9b07      	ldr	r3, [sp, #28]
 80031ce:	3307      	adds	r3, #7
 80031d0:	4393      	bics	r3, r2
 80031d2:	3308      	adds	r3, #8
 80031d4:	9307      	str	r3, [sp, #28]
 80031d6:	6963      	ldr	r3, [r4, #20]
 80031d8:	9a04      	ldr	r2, [sp, #16]
 80031da:	189b      	adds	r3, r3, r2
 80031dc:	6163      	str	r3, [r4, #20]
 80031de:	e766      	b.n	80030ae <_svfiprintf_r+0x46>
 80031e0:	4343      	muls	r3, r0
 80031e2:	2101      	movs	r1, #1
 80031e4:	189b      	adds	r3, r3, r2
 80031e6:	0035      	movs	r5, r6
 80031e8:	e7a6      	b.n	8003138 <_svfiprintf_r+0xd0>
 80031ea:	2301      	movs	r3, #1
 80031ec:	425b      	negs	r3, r3
 80031ee:	e7d0      	b.n	8003192 <_svfiprintf_r+0x12a>
 80031f0:	2300      	movs	r3, #0
 80031f2:	200a      	movs	r0, #10
 80031f4:	001a      	movs	r2, r3
 80031f6:	3501      	adds	r5, #1
 80031f8:	6063      	str	r3, [r4, #4]
 80031fa:	7829      	ldrb	r1, [r5, #0]
 80031fc:	1c6e      	adds	r6, r5, #1
 80031fe:	3930      	subs	r1, #48	; 0x30
 8003200:	2909      	cmp	r1, #9
 8003202:	d903      	bls.n	800320c <_svfiprintf_r+0x1a4>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0c5      	beq.n	8003194 <_svfiprintf_r+0x12c>
 8003208:	9209      	str	r2, [sp, #36]	; 0x24
 800320a:	e7c3      	b.n	8003194 <_svfiprintf_r+0x12c>
 800320c:	4342      	muls	r2, r0
 800320e:	2301      	movs	r3, #1
 8003210:	1852      	adds	r2, r2, r1
 8003212:	0035      	movs	r5, r6
 8003214:	e7f1      	b.n	80031fa <_svfiprintf_r+0x192>
 8003216:	ab07      	add	r3, sp, #28
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	003a      	movs	r2, r7
 800321c:	4b10      	ldr	r3, [pc, #64]	; (8003260 <_svfiprintf_r+0x1f8>)
 800321e:	0021      	movs	r1, r4
 8003220:	9803      	ldr	r0, [sp, #12]
 8003222:	e000      	b.n	8003226 <_svfiprintf_r+0x1be>
 8003224:	bf00      	nop
 8003226:	9004      	str	r0, [sp, #16]
 8003228:	9b04      	ldr	r3, [sp, #16]
 800322a:	3301      	adds	r3, #1
 800322c:	d1d3      	bne.n	80031d6 <_svfiprintf_r+0x16e>
 800322e:	89bb      	ldrh	r3, [r7, #12]
 8003230:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003232:	065b      	lsls	r3, r3, #25
 8003234:	d400      	bmi.n	8003238 <_svfiprintf_r+0x1d0>
 8003236:	e72e      	b.n	8003096 <_svfiprintf_r+0x2e>
 8003238:	2001      	movs	r0, #1
 800323a:	4240      	negs	r0, r0
 800323c:	e72b      	b.n	8003096 <_svfiprintf_r+0x2e>
 800323e:	ab07      	add	r3, sp, #28
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	003a      	movs	r2, r7
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <_svfiprintf_r+0x1f8>)
 8003246:	0021      	movs	r1, r4
 8003248:	9803      	ldr	r0, [sp, #12]
 800324a:	f000 f879 	bl	8003340 <_printf_i>
 800324e:	e7ea      	b.n	8003226 <_svfiprintf_r+0x1be>
 8003250:	08006628 	.word	0x08006628
 8003254:	0800662e 	.word	0x0800662e
 8003258:	08006632 	.word	0x08006632
 800325c:	00000000 	.word	0x00000000
 8003260:	08002fa5 	.word	0x08002fa5

08003264 <_printf_common>:
 8003264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003266:	0015      	movs	r5, r2
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	688a      	ldr	r2, [r1, #8]
 800326c:	690b      	ldr	r3, [r1, #16]
 800326e:	9000      	str	r0, [sp, #0]
 8003270:	000c      	movs	r4, r1
 8003272:	4293      	cmp	r3, r2
 8003274:	da00      	bge.n	8003278 <_printf_common+0x14>
 8003276:	0013      	movs	r3, r2
 8003278:	0022      	movs	r2, r4
 800327a:	602b      	str	r3, [r5, #0]
 800327c:	3243      	adds	r2, #67	; 0x43
 800327e:	7812      	ldrb	r2, [r2, #0]
 8003280:	2a00      	cmp	r2, #0
 8003282:	d001      	beq.n	8003288 <_printf_common+0x24>
 8003284:	3301      	adds	r3, #1
 8003286:	602b      	str	r3, [r5, #0]
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	069b      	lsls	r3, r3, #26
 800328c:	d502      	bpl.n	8003294 <_printf_common+0x30>
 800328e:	682b      	ldr	r3, [r5, #0]
 8003290:	3302      	adds	r3, #2
 8003292:	602b      	str	r3, [r5, #0]
 8003294:	2706      	movs	r7, #6
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	401f      	ands	r7, r3
 800329a:	d027      	beq.n	80032ec <_printf_common+0x88>
 800329c:	0023      	movs	r3, r4
 800329e:	3343      	adds	r3, #67	; 0x43
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	1e5a      	subs	r2, r3, #1
 80032a4:	4193      	sbcs	r3, r2
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	0692      	lsls	r2, r2, #26
 80032aa:	d430      	bmi.n	800330e <_printf_common+0xaa>
 80032ac:	0022      	movs	r2, r4
 80032ae:	9901      	ldr	r1, [sp, #4]
 80032b0:	3243      	adds	r2, #67	; 0x43
 80032b2:	9800      	ldr	r0, [sp, #0]
 80032b4:	9e08      	ldr	r6, [sp, #32]
 80032b6:	47b0      	blx	r6
 80032b8:	1c43      	adds	r3, r0, #1
 80032ba:	d025      	beq.n	8003308 <_printf_common+0xa4>
 80032bc:	2306      	movs	r3, #6
 80032be:	6820      	ldr	r0, [r4, #0]
 80032c0:	682a      	ldr	r2, [r5, #0]
 80032c2:	68e1      	ldr	r1, [r4, #12]
 80032c4:	4003      	ands	r3, r0
 80032c6:	2500      	movs	r5, #0
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d103      	bne.n	80032d4 <_printf_common+0x70>
 80032cc:	1a8d      	subs	r5, r1, r2
 80032ce:	43eb      	mvns	r3, r5
 80032d0:	17db      	asrs	r3, r3, #31
 80032d2:	401d      	ands	r5, r3
 80032d4:	68a3      	ldr	r3, [r4, #8]
 80032d6:	6922      	ldr	r2, [r4, #16]
 80032d8:	4293      	cmp	r3, r2
 80032da:	dd01      	ble.n	80032e0 <_printf_common+0x7c>
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	18ed      	adds	r5, r5, r3
 80032e0:	2700      	movs	r7, #0
 80032e2:	42bd      	cmp	r5, r7
 80032e4:	d120      	bne.n	8003328 <_printf_common+0xc4>
 80032e6:	2000      	movs	r0, #0
 80032e8:	e010      	b.n	800330c <_printf_common+0xa8>
 80032ea:	3701      	adds	r7, #1
 80032ec:	68e3      	ldr	r3, [r4, #12]
 80032ee:	682a      	ldr	r2, [r5, #0]
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	42bb      	cmp	r3, r7
 80032f4:	ddd2      	ble.n	800329c <_printf_common+0x38>
 80032f6:	0022      	movs	r2, r4
 80032f8:	2301      	movs	r3, #1
 80032fa:	3219      	adds	r2, #25
 80032fc:	9901      	ldr	r1, [sp, #4]
 80032fe:	9800      	ldr	r0, [sp, #0]
 8003300:	9e08      	ldr	r6, [sp, #32]
 8003302:	47b0      	blx	r6
 8003304:	1c43      	adds	r3, r0, #1
 8003306:	d1f0      	bne.n	80032ea <_printf_common+0x86>
 8003308:	2001      	movs	r0, #1
 800330a:	4240      	negs	r0, r0
 800330c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800330e:	2030      	movs	r0, #48	; 0x30
 8003310:	18e1      	adds	r1, r4, r3
 8003312:	3143      	adds	r1, #67	; 0x43
 8003314:	7008      	strb	r0, [r1, #0]
 8003316:	0021      	movs	r1, r4
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	3145      	adds	r1, #69	; 0x45
 800331c:	7809      	ldrb	r1, [r1, #0]
 800331e:	18a2      	adds	r2, r4, r2
 8003320:	3243      	adds	r2, #67	; 0x43
 8003322:	3302      	adds	r3, #2
 8003324:	7011      	strb	r1, [r2, #0]
 8003326:	e7c1      	b.n	80032ac <_printf_common+0x48>
 8003328:	0022      	movs	r2, r4
 800332a:	2301      	movs	r3, #1
 800332c:	321a      	adds	r2, #26
 800332e:	9901      	ldr	r1, [sp, #4]
 8003330:	9800      	ldr	r0, [sp, #0]
 8003332:	9e08      	ldr	r6, [sp, #32]
 8003334:	47b0      	blx	r6
 8003336:	1c43      	adds	r3, r0, #1
 8003338:	d0e6      	beq.n	8003308 <_printf_common+0xa4>
 800333a:	3701      	adds	r7, #1
 800333c:	e7d1      	b.n	80032e2 <_printf_common+0x7e>
	...

08003340 <_printf_i>:
 8003340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003342:	b089      	sub	sp, #36	; 0x24
 8003344:	9204      	str	r2, [sp, #16]
 8003346:	000a      	movs	r2, r1
 8003348:	3243      	adds	r2, #67	; 0x43
 800334a:	9305      	str	r3, [sp, #20]
 800334c:	9003      	str	r0, [sp, #12]
 800334e:	9202      	str	r2, [sp, #8]
 8003350:	7e0a      	ldrb	r2, [r1, #24]
 8003352:	000c      	movs	r4, r1
 8003354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003356:	2a6e      	cmp	r2, #110	; 0x6e
 8003358:	d100      	bne.n	800335c <_printf_i+0x1c>
 800335a:	e086      	b.n	800346a <_printf_i+0x12a>
 800335c:	d81f      	bhi.n	800339e <_printf_i+0x5e>
 800335e:	2a63      	cmp	r2, #99	; 0x63
 8003360:	d033      	beq.n	80033ca <_printf_i+0x8a>
 8003362:	d808      	bhi.n	8003376 <_printf_i+0x36>
 8003364:	2a00      	cmp	r2, #0
 8003366:	d100      	bne.n	800336a <_printf_i+0x2a>
 8003368:	e08c      	b.n	8003484 <_printf_i+0x144>
 800336a:	2a58      	cmp	r2, #88	; 0x58
 800336c:	d04d      	beq.n	800340a <_printf_i+0xca>
 800336e:	0025      	movs	r5, r4
 8003370:	3542      	adds	r5, #66	; 0x42
 8003372:	702a      	strb	r2, [r5, #0]
 8003374:	e030      	b.n	80033d8 <_printf_i+0x98>
 8003376:	2a64      	cmp	r2, #100	; 0x64
 8003378:	d001      	beq.n	800337e <_printf_i+0x3e>
 800337a:	2a69      	cmp	r2, #105	; 0x69
 800337c:	d1f7      	bne.n	800336e <_printf_i+0x2e>
 800337e:	6819      	ldr	r1, [r3, #0]
 8003380:	6825      	ldr	r5, [r4, #0]
 8003382:	1d0a      	adds	r2, r1, #4
 8003384:	0628      	lsls	r0, r5, #24
 8003386:	d529      	bpl.n	80033dc <_printf_i+0x9c>
 8003388:	6808      	ldr	r0, [r1, #0]
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	2800      	cmp	r0, #0
 800338e:	da03      	bge.n	8003398 <_printf_i+0x58>
 8003390:	232d      	movs	r3, #45	; 0x2d
 8003392:	9a02      	ldr	r2, [sp, #8]
 8003394:	4240      	negs	r0, r0
 8003396:	7013      	strb	r3, [r2, #0]
 8003398:	4e6b      	ldr	r6, [pc, #428]	; (8003548 <_printf_i+0x208>)
 800339a:	270a      	movs	r7, #10
 800339c:	e04f      	b.n	800343e <_printf_i+0xfe>
 800339e:	2a73      	cmp	r2, #115	; 0x73
 80033a0:	d074      	beq.n	800348c <_printf_i+0x14c>
 80033a2:	d808      	bhi.n	80033b6 <_printf_i+0x76>
 80033a4:	2a6f      	cmp	r2, #111	; 0x6f
 80033a6:	d01f      	beq.n	80033e8 <_printf_i+0xa8>
 80033a8:	2a70      	cmp	r2, #112	; 0x70
 80033aa:	d1e0      	bne.n	800336e <_printf_i+0x2e>
 80033ac:	2220      	movs	r2, #32
 80033ae:	6809      	ldr	r1, [r1, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	6022      	str	r2, [r4, #0]
 80033b4:	e003      	b.n	80033be <_printf_i+0x7e>
 80033b6:	2a75      	cmp	r2, #117	; 0x75
 80033b8:	d016      	beq.n	80033e8 <_printf_i+0xa8>
 80033ba:	2a78      	cmp	r2, #120	; 0x78
 80033bc:	d1d7      	bne.n	800336e <_printf_i+0x2e>
 80033be:	0022      	movs	r2, r4
 80033c0:	2178      	movs	r1, #120	; 0x78
 80033c2:	3245      	adds	r2, #69	; 0x45
 80033c4:	7011      	strb	r1, [r2, #0]
 80033c6:	4e61      	ldr	r6, [pc, #388]	; (800354c <_printf_i+0x20c>)
 80033c8:	e022      	b.n	8003410 <_printf_i+0xd0>
 80033ca:	0025      	movs	r5, r4
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	3542      	adds	r5, #66	; 0x42
 80033d0:	1d11      	adds	r1, r2, #4
 80033d2:	6019      	str	r1, [r3, #0]
 80033d4:	6813      	ldr	r3, [r2, #0]
 80033d6:	702b      	strb	r3, [r5, #0]
 80033d8:	2301      	movs	r3, #1
 80033da:	e065      	b.n	80034a8 <_printf_i+0x168>
 80033dc:	6808      	ldr	r0, [r1, #0]
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	0669      	lsls	r1, r5, #25
 80033e2:	d5d3      	bpl.n	800338c <_printf_i+0x4c>
 80033e4:	b200      	sxth	r0, r0
 80033e6:	e7d1      	b.n	800338c <_printf_i+0x4c>
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	6825      	ldr	r5, [r4, #0]
 80033ec:	1d08      	adds	r0, r1, #4
 80033ee:	6018      	str	r0, [r3, #0]
 80033f0:	6808      	ldr	r0, [r1, #0]
 80033f2:	062e      	lsls	r6, r5, #24
 80033f4:	d505      	bpl.n	8003402 <_printf_i+0xc2>
 80033f6:	4e54      	ldr	r6, [pc, #336]	; (8003548 <_printf_i+0x208>)
 80033f8:	2708      	movs	r7, #8
 80033fa:	2a6f      	cmp	r2, #111	; 0x6f
 80033fc:	d01b      	beq.n	8003436 <_printf_i+0xf6>
 80033fe:	270a      	movs	r7, #10
 8003400:	e019      	b.n	8003436 <_printf_i+0xf6>
 8003402:	066d      	lsls	r5, r5, #25
 8003404:	d5f7      	bpl.n	80033f6 <_printf_i+0xb6>
 8003406:	b280      	uxth	r0, r0
 8003408:	e7f5      	b.n	80033f6 <_printf_i+0xb6>
 800340a:	3145      	adds	r1, #69	; 0x45
 800340c:	4e4e      	ldr	r6, [pc, #312]	; (8003548 <_printf_i+0x208>)
 800340e:	700a      	strb	r2, [r1, #0]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	6822      	ldr	r2, [r4, #0]
 8003414:	1d01      	adds	r1, r0, #4
 8003416:	6800      	ldr	r0, [r0, #0]
 8003418:	6019      	str	r1, [r3, #0]
 800341a:	0615      	lsls	r5, r2, #24
 800341c:	d521      	bpl.n	8003462 <_printf_i+0x122>
 800341e:	07d3      	lsls	r3, r2, #31
 8003420:	d502      	bpl.n	8003428 <_printf_i+0xe8>
 8003422:	2320      	movs	r3, #32
 8003424:	431a      	orrs	r2, r3
 8003426:	6022      	str	r2, [r4, #0]
 8003428:	2710      	movs	r7, #16
 800342a:	2800      	cmp	r0, #0
 800342c:	d103      	bne.n	8003436 <_printf_i+0xf6>
 800342e:	2320      	movs	r3, #32
 8003430:	6822      	ldr	r2, [r4, #0]
 8003432:	439a      	bics	r2, r3
 8003434:	6022      	str	r2, [r4, #0]
 8003436:	0023      	movs	r3, r4
 8003438:	2200      	movs	r2, #0
 800343a:	3343      	adds	r3, #67	; 0x43
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	6863      	ldr	r3, [r4, #4]
 8003440:	60a3      	str	r3, [r4, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db58      	blt.n	80034f8 <_printf_i+0x1b8>
 8003446:	2204      	movs	r2, #4
 8003448:	6821      	ldr	r1, [r4, #0]
 800344a:	4391      	bics	r1, r2
 800344c:	6021      	str	r1, [r4, #0]
 800344e:	2800      	cmp	r0, #0
 8003450:	d154      	bne.n	80034fc <_printf_i+0x1bc>
 8003452:	9d02      	ldr	r5, [sp, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d05a      	beq.n	800350e <_printf_i+0x1ce>
 8003458:	0025      	movs	r5, r4
 800345a:	7833      	ldrb	r3, [r6, #0]
 800345c:	3542      	adds	r5, #66	; 0x42
 800345e:	702b      	strb	r3, [r5, #0]
 8003460:	e055      	b.n	800350e <_printf_i+0x1ce>
 8003462:	0655      	lsls	r5, r2, #25
 8003464:	d5db      	bpl.n	800341e <_printf_i+0xde>
 8003466:	b280      	uxth	r0, r0
 8003468:	e7d9      	b.n	800341e <_printf_i+0xde>
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	680d      	ldr	r5, [r1, #0]
 800346e:	1d10      	adds	r0, r2, #4
 8003470:	6949      	ldr	r1, [r1, #20]
 8003472:	6018      	str	r0, [r3, #0]
 8003474:	6813      	ldr	r3, [r2, #0]
 8003476:	062e      	lsls	r6, r5, #24
 8003478:	d501      	bpl.n	800347e <_printf_i+0x13e>
 800347a:	6019      	str	r1, [r3, #0]
 800347c:	e002      	b.n	8003484 <_printf_i+0x144>
 800347e:	066d      	lsls	r5, r5, #25
 8003480:	d5fb      	bpl.n	800347a <_printf_i+0x13a>
 8003482:	8019      	strh	r1, [r3, #0]
 8003484:	2300      	movs	r3, #0
 8003486:	9d02      	ldr	r5, [sp, #8]
 8003488:	6123      	str	r3, [r4, #16]
 800348a:	e04f      	b.n	800352c <_printf_i+0x1ec>
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	1d11      	adds	r1, r2, #4
 8003490:	6019      	str	r1, [r3, #0]
 8003492:	6815      	ldr	r5, [r2, #0]
 8003494:	2100      	movs	r1, #0
 8003496:	6862      	ldr	r2, [r4, #4]
 8003498:	0028      	movs	r0, r5
 800349a:	f000 f859 	bl	8003550 <memchr>
 800349e:	2800      	cmp	r0, #0
 80034a0:	d001      	beq.n	80034a6 <_printf_i+0x166>
 80034a2:	1b40      	subs	r0, r0, r5
 80034a4:	6060      	str	r0, [r4, #4]
 80034a6:	6863      	ldr	r3, [r4, #4]
 80034a8:	6123      	str	r3, [r4, #16]
 80034aa:	2300      	movs	r3, #0
 80034ac:	9a02      	ldr	r2, [sp, #8]
 80034ae:	7013      	strb	r3, [r2, #0]
 80034b0:	e03c      	b.n	800352c <_printf_i+0x1ec>
 80034b2:	6923      	ldr	r3, [r4, #16]
 80034b4:	002a      	movs	r2, r5
 80034b6:	9904      	ldr	r1, [sp, #16]
 80034b8:	9803      	ldr	r0, [sp, #12]
 80034ba:	9d05      	ldr	r5, [sp, #20]
 80034bc:	47a8      	blx	r5
 80034be:	1c43      	adds	r3, r0, #1
 80034c0:	d03e      	beq.n	8003540 <_printf_i+0x200>
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	079b      	lsls	r3, r3, #30
 80034c6:	d415      	bmi.n	80034f4 <_printf_i+0x1b4>
 80034c8:	9b07      	ldr	r3, [sp, #28]
 80034ca:	68e0      	ldr	r0, [r4, #12]
 80034cc:	4298      	cmp	r0, r3
 80034ce:	da39      	bge.n	8003544 <_printf_i+0x204>
 80034d0:	0018      	movs	r0, r3
 80034d2:	e037      	b.n	8003544 <_printf_i+0x204>
 80034d4:	0022      	movs	r2, r4
 80034d6:	2301      	movs	r3, #1
 80034d8:	3219      	adds	r2, #25
 80034da:	9904      	ldr	r1, [sp, #16]
 80034dc:	9803      	ldr	r0, [sp, #12]
 80034de:	9e05      	ldr	r6, [sp, #20]
 80034e0:	47b0      	blx	r6
 80034e2:	1c43      	adds	r3, r0, #1
 80034e4:	d02c      	beq.n	8003540 <_printf_i+0x200>
 80034e6:	3501      	adds	r5, #1
 80034e8:	68e3      	ldr	r3, [r4, #12]
 80034ea:	9a07      	ldr	r2, [sp, #28]
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	42ab      	cmp	r3, r5
 80034f0:	dcf0      	bgt.n	80034d4 <_printf_i+0x194>
 80034f2:	e7e9      	b.n	80034c8 <_printf_i+0x188>
 80034f4:	2500      	movs	r5, #0
 80034f6:	e7f7      	b.n	80034e8 <_printf_i+0x1a8>
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d0ad      	beq.n	8003458 <_printf_i+0x118>
 80034fc:	9d02      	ldr	r5, [sp, #8]
 80034fe:	0039      	movs	r1, r7
 8003500:	f7fc fe88 	bl	8000214 <__aeabi_uidivmod>
 8003504:	5c73      	ldrb	r3, [r6, r1]
 8003506:	3d01      	subs	r5, #1
 8003508:	702b      	strb	r3, [r5, #0]
 800350a:	2800      	cmp	r0, #0
 800350c:	d1f7      	bne.n	80034fe <_printf_i+0x1be>
 800350e:	2f08      	cmp	r7, #8
 8003510:	d109      	bne.n	8003526 <_printf_i+0x1e6>
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	07db      	lsls	r3, r3, #31
 8003516:	d506      	bpl.n	8003526 <_printf_i+0x1e6>
 8003518:	6863      	ldr	r3, [r4, #4]
 800351a:	6922      	ldr	r2, [r4, #16]
 800351c:	4293      	cmp	r3, r2
 800351e:	dc02      	bgt.n	8003526 <_printf_i+0x1e6>
 8003520:	2330      	movs	r3, #48	; 0x30
 8003522:	3d01      	subs	r5, #1
 8003524:	702b      	strb	r3, [r5, #0]
 8003526:	9b02      	ldr	r3, [sp, #8]
 8003528:	1b5b      	subs	r3, r3, r5
 800352a:	6123      	str	r3, [r4, #16]
 800352c:	9b05      	ldr	r3, [sp, #20]
 800352e:	aa07      	add	r2, sp, #28
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	0021      	movs	r1, r4
 8003534:	9b04      	ldr	r3, [sp, #16]
 8003536:	9803      	ldr	r0, [sp, #12]
 8003538:	f7ff fe94 	bl	8003264 <_printf_common>
 800353c:	1c43      	adds	r3, r0, #1
 800353e:	d1b8      	bne.n	80034b2 <_printf_i+0x172>
 8003540:	2001      	movs	r0, #1
 8003542:	4240      	negs	r0, r0
 8003544:	b009      	add	sp, #36	; 0x24
 8003546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003548:	08006639 	.word	0x08006639
 800354c:	0800664a 	.word	0x0800664a

08003550 <memchr>:
 8003550:	b2c9      	uxtb	r1, r1
 8003552:	1882      	adds	r2, r0, r2
 8003554:	4290      	cmp	r0, r2
 8003556:	d101      	bne.n	800355c <memchr+0xc>
 8003558:	2000      	movs	r0, #0
 800355a:	4770      	bx	lr
 800355c:	7803      	ldrb	r3, [r0, #0]
 800355e:	428b      	cmp	r3, r1
 8003560:	d0fb      	beq.n	800355a <memchr+0xa>
 8003562:	3001      	adds	r0, #1
 8003564:	e7f6      	b.n	8003554 <memchr+0x4>

08003566 <memcpy>:
 8003566:	2300      	movs	r3, #0
 8003568:	b510      	push	{r4, lr}
 800356a:	429a      	cmp	r2, r3
 800356c:	d100      	bne.n	8003570 <memcpy+0xa>
 800356e:	bd10      	pop	{r4, pc}
 8003570:	5ccc      	ldrb	r4, [r1, r3]
 8003572:	54c4      	strb	r4, [r0, r3]
 8003574:	3301      	adds	r3, #1
 8003576:	e7f8      	b.n	800356a <memcpy+0x4>

08003578 <_free_r>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	0005      	movs	r5, r0
 800357c:	2900      	cmp	r1, #0
 800357e:	d010      	beq.n	80035a2 <_free_r+0x2a>
 8003580:	1f0c      	subs	r4, r1, #4
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	da00      	bge.n	800358a <_free_r+0x12>
 8003588:	18e4      	adds	r4, r4, r3
 800358a:	0028      	movs	r0, r5
 800358c:	f000 f8d4 	bl	8003738 <__malloc_lock>
 8003590:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <_free_r+0x90>)
 8003592:	6813      	ldr	r3, [r2, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <_free_r+0x2c>
 8003598:	6063      	str	r3, [r4, #4]
 800359a:	6014      	str	r4, [r2, #0]
 800359c:	0028      	movs	r0, r5
 800359e:	f000 f8cc 	bl	800373a <__malloc_unlock>
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	42a3      	cmp	r3, r4
 80035a6:	d909      	bls.n	80035bc <_free_r+0x44>
 80035a8:	6821      	ldr	r1, [r4, #0]
 80035aa:	1860      	adds	r0, r4, r1
 80035ac:	4283      	cmp	r3, r0
 80035ae:	d1f3      	bne.n	8003598 <_free_r+0x20>
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	1841      	adds	r1, r0, r1
 80035b6:	6021      	str	r1, [r4, #0]
 80035b8:	e7ee      	b.n	8003598 <_free_r+0x20>
 80035ba:	0013      	movs	r3, r2
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	2a00      	cmp	r2, #0
 80035c0:	d001      	beq.n	80035c6 <_free_r+0x4e>
 80035c2:	42a2      	cmp	r2, r4
 80035c4:	d9f9      	bls.n	80035ba <_free_r+0x42>
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	1858      	adds	r0, r3, r1
 80035ca:	42a0      	cmp	r0, r4
 80035cc:	d10b      	bne.n	80035e6 <_free_r+0x6e>
 80035ce:	6820      	ldr	r0, [r4, #0]
 80035d0:	1809      	adds	r1, r1, r0
 80035d2:	1858      	adds	r0, r3, r1
 80035d4:	6019      	str	r1, [r3, #0]
 80035d6:	4282      	cmp	r2, r0
 80035d8:	d1e0      	bne.n	800359c <_free_r+0x24>
 80035da:	6810      	ldr	r0, [r2, #0]
 80035dc:	6852      	ldr	r2, [r2, #4]
 80035de:	1841      	adds	r1, r0, r1
 80035e0:	6019      	str	r1, [r3, #0]
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	e7da      	b.n	800359c <_free_r+0x24>
 80035e6:	42a0      	cmp	r0, r4
 80035e8:	d902      	bls.n	80035f0 <_free_r+0x78>
 80035ea:	230c      	movs	r3, #12
 80035ec:	602b      	str	r3, [r5, #0]
 80035ee:	e7d5      	b.n	800359c <_free_r+0x24>
 80035f0:	6821      	ldr	r1, [r4, #0]
 80035f2:	1860      	adds	r0, r4, r1
 80035f4:	4282      	cmp	r2, r0
 80035f6:	d103      	bne.n	8003600 <_free_r+0x88>
 80035f8:	6810      	ldr	r0, [r2, #0]
 80035fa:	6852      	ldr	r2, [r2, #4]
 80035fc:	1841      	adds	r1, r0, r1
 80035fe:	6021      	str	r1, [r4, #0]
 8003600:	6062      	str	r2, [r4, #4]
 8003602:	605c      	str	r4, [r3, #4]
 8003604:	e7ca      	b.n	800359c <_free_r+0x24>
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	200004b8 	.word	0x200004b8

0800360c <_malloc_r>:
 800360c:	2303      	movs	r3, #3
 800360e:	b570      	push	{r4, r5, r6, lr}
 8003610:	1ccd      	adds	r5, r1, #3
 8003612:	439d      	bics	r5, r3
 8003614:	3508      	adds	r5, #8
 8003616:	0006      	movs	r6, r0
 8003618:	2d0c      	cmp	r5, #12
 800361a:	d21e      	bcs.n	800365a <_malloc_r+0x4e>
 800361c:	250c      	movs	r5, #12
 800361e:	42a9      	cmp	r1, r5
 8003620:	d81d      	bhi.n	800365e <_malloc_r+0x52>
 8003622:	0030      	movs	r0, r6
 8003624:	f000 f888 	bl	8003738 <__malloc_lock>
 8003628:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <_malloc_r+0xb4>)
 800362a:	6814      	ldr	r4, [r2, #0]
 800362c:	0021      	movs	r1, r4
 800362e:	2900      	cmp	r1, #0
 8003630:	d119      	bne.n	8003666 <_malloc_r+0x5a>
 8003632:	4c24      	ldr	r4, [pc, #144]	; (80036c4 <_malloc_r+0xb8>)
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <_malloc_r+0x36>
 800363a:	0030      	movs	r0, r6
 800363c:	f000 f86a 	bl	8003714 <_sbrk_r>
 8003640:	6020      	str	r0, [r4, #0]
 8003642:	0029      	movs	r1, r5
 8003644:	0030      	movs	r0, r6
 8003646:	f000 f865 	bl	8003714 <_sbrk_r>
 800364a:	1c43      	adds	r3, r0, #1
 800364c:	d12b      	bne.n	80036a6 <_malloc_r+0x9a>
 800364e:	230c      	movs	r3, #12
 8003650:	0030      	movs	r0, r6
 8003652:	6033      	str	r3, [r6, #0]
 8003654:	f000 f871 	bl	800373a <__malloc_unlock>
 8003658:	e003      	b.n	8003662 <_malloc_r+0x56>
 800365a:	2d00      	cmp	r5, #0
 800365c:	dadf      	bge.n	800361e <_malloc_r+0x12>
 800365e:	230c      	movs	r3, #12
 8003660:	6033      	str	r3, [r6, #0]
 8003662:	2000      	movs	r0, #0
 8003664:	bd70      	pop	{r4, r5, r6, pc}
 8003666:	680b      	ldr	r3, [r1, #0]
 8003668:	1b5b      	subs	r3, r3, r5
 800366a:	d419      	bmi.n	80036a0 <_malloc_r+0x94>
 800366c:	2b0b      	cmp	r3, #11
 800366e:	d903      	bls.n	8003678 <_malloc_r+0x6c>
 8003670:	600b      	str	r3, [r1, #0]
 8003672:	18cc      	adds	r4, r1, r3
 8003674:	6025      	str	r5, [r4, #0]
 8003676:	e003      	b.n	8003680 <_malloc_r+0x74>
 8003678:	684b      	ldr	r3, [r1, #4]
 800367a:	428c      	cmp	r4, r1
 800367c:	d10d      	bne.n	800369a <_malloc_r+0x8e>
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	0030      	movs	r0, r6
 8003682:	f000 f85a 	bl	800373a <__malloc_unlock>
 8003686:	0020      	movs	r0, r4
 8003688:	2207      	movs	r2, #7
 800368a:	300b      	adds	r0, #11
 800368c:	1d23      	adds	r3, r4, #4
 800368e:	4390      	bics	r0, r2
 8003690:	1ac3      	subs	r3, r0, r3
 8003692:	d0e7      	beq.n	8003664 <_malloc_r+0x58>
 8003694:	425a      	negs	r2, r3
 8003696:	50e2      	str	r2, [r4, r3]
 8003698:	e7e4      	b.n	8003664 <_malloc_r+0x58>
 800369a:	6063      	str	r3, [r4, #4]
 800369c:	000c      	movs	r4, r1
 800369e:	e7ef      	b.n	8003680 <_malloc_r+0x74>
 80036a0:	000c      	movs	r4, r1
 80036a2:	6849      	ldr	r1, [r1, #4]
 80036a4:	e7c3      	b.n	800362e <_malloc_r+0x22>
 80036a6:	2303      	movs	r3, #3
 80036a8:	1cc4      	adds	r4, r0, #3
 80036aa:	439c      	bics	r4, r3
 80036ac:	42a0      	cmp	r0, r4
 80036ae:	d0e1      	beq.n	8003674 <_malloc_r+0x68>
 80036b0:	1a21      	subs	r1, r4, r0
 80036b2:	0030      	movs	r0, r6
 80036b4:	f000 f82e 	bl	8003714 <_sbrk_r>
 80036b8:	1c43      	adds	r3, r0, #1
 80036ba:	d1db      	bne.n	8003674 <_malloc_r+0x68>
 80036bc:	e7c7      	b.n	800364e <_malloc_r+0x42>
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	200004b8 	.word	0x200004b8
 80036c4:	200004bc 	.word	0x200004bc

080036c8 <_realloc_r>:
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	0007      	movs	r7, r0
 80036cc:	000d      	movs	r5, r1
 80036ce:	0016      	movs	r6, r2
 80036d0:	2900      	cmp	r1, #0
 80036d2:	d105      	bne.n	80036e0 <_realloc_r+0x18>
 80036d4:	0011      	movs	r1, r2
 80036d6:	f7ff ff99 	bl	800360c <_malloc_r>
 80036da:	0004      	movs	r4, r0
 80036dc:	0020      	movs	r0, r4
 80036de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036e0:	2a00      	cmp	r2, #0
 80036e2:	d103      	bne.n	80036ec <_realloc_r+0x24>
 80036e4:	f7ff ff48 	bl	8003578 <_free_r>
 80036e8:	0034      	movs	r4, r6
 80036ea:	e7f7      	b.n	80036dc <_realloc_r+0x14>
 80036ec:	f000 f826 	bl	800373c <_malloc_usable_size_r>
 80036f0:	002c      	movs	r4, r5
 80036f2:	42b0      	cmp	r0, r6
 80036f4:	d2f2      	bcs.n	80036dc <_realloc_r+0x14>
 80036f6:	0031      	movs	r1, r6
 80036f8:	0038      	movs	r0, r7
 80036fa:	f7ff ff87 	bl	800360c <_malloc_r>
 80036fe:	1e04      	subs	r4, r0, #0
 8003700:	d0ec      	beq.n	80036dc <_realloc_r+0x14>
 8003702:	0029      	movs	r1, r5
 8003704:	0032      	movs	r2, r6
 8003706:	f7ff ff2e 	bl	8003566 <memcpy>
 800370a:	0029      	movs	r1, r5
 800370c:	0038      	movs	r0, r7
 800370e:	f7ff ff33 	bl	8003578 <_free_r>
 8003712:	e7e3      	b.n	80036dc <_realloc_r+0x14>

08003714 <_sbrk_r>:
 8003714:	2300      	movs	r3, #0
 8003716:	b570      	push	{r4, r5, r6, lr}
 8003718:	4c06      	ldr	r4, [pc, #24]	; (8003734 <_sbrk_r+0x20>)
 800371a:	0005      	movs	r5, r0
 800371c:	0008      	movs	r0, r1
 800371e:	6023      	str	r3, [r4, #0]
 8003720:	f7fd fb00 	bl	8000d24 <_sbrk>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	d103      	bne.n	8003730 <_sbrk_r+0x1c>
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d000      	beq.n	8003730 <_sbrk_r+0x1c>
 800372e:	602b      	str	r3, [r5, #0]
 8003730:	bd70      	pop	{r4, r5, r6, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	20000520 	.word	0x20000520

08003738 <__malloc_lock>:
 8003738:	4770      	bx	lr

0800373a <__malloc_unlock>:
 800373a:	4770      	bx	lr

0800373c <_malloc_usable_size_r>:
 800373c:	1f0b      	subs	r3, r1, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	1f18      	subs	r0, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	da01      	bge.n	800374a <_malloc_usable_size_r+0xe>
 8003746:	580b      	ldr	r3, [r1, r0]
 8003748:	18c0      	adds	r0, r0, r3
 800374a:	4770      	bx	lr

0800374c <_init>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr

08003758 <_fini>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr
